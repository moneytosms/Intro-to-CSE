/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var ts = {}; ((module) => {
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => (__copyProps, mod); // Modified helper to skip setting __esModule.

// src/typescript/typescript.ts
var typescript_exports = {};
__export(typescript_exports, {
  ANONYMOUS: () => ANONYMOUS,
  AccessFlags: () => AccessFlags,
  AssertionLevel: () => AssertionLevel,
  AssignmentDeclarationKind: () => AssignmentDeclarationKind,
  AssignmentKind: () => AssignmentKind,
  Associativity: () => Associativity,
  BreakpointResolver: () => ts_BreakpointResolver_exports,
  BuilderFileEmit: () => BuilderFileEmit,
  BuilderProgramKind: () => BuilderProgramKind,
  BuilderState: () => BuilderState,
  CallHierarchy: () => ts_CallHierarchy_exports,
  CharacterCodes: () => CharacterCodes,
  CheckFlags: () => CheckFlags,
  CheckMode: () => CheckMode,
  ClassificationType: () => ClassificationType,
  ClassificationTypeNames: () => ClassificationTypeNames,
  CommentDirectiveType: () => CommentDirectiveType,
  Comparison: () => Comparison,
  CompletionInfoFlags: () => CompletionInfoFlags,
  CompletionTriggerKind: () => CompletionTriggerKind,
  Completions: () => ts_Completions_exports,
  ContainerFlags: () => ContainerFlags,
  ContextFlags: () => ContextFlags,
  Debug: () => Debug,
  DiagnosticCategory: () => DiagnosticCategory,
  Diagnostics: () => Diagnostics,
  DocumentHighlights: () => DocumentHighlights,
  ElementFlags: () => ElementFlags,
  EmitFlags: () => EmitFlags,
  EmitHint: () => EmitHint,
  EmitOnly: () => EmitOnly,
  EndOfLineState: () => EndOfLineState,
  ExitStatus: () => ExitStatus,
  ExportKind: () => ExportKind,
  Extension: () => Extension,
  ExternalEmitHelpers: () => ExternalEmitHelpers,
  FileIncludeKind: () => FileIncludeKind,
  FilePreprocessingDiagnosticsKind: () => FilePreprocessingDiagnosticsKind,
  FileSystemEntryKind: () => FileSystemEntryKind,
  FileWatcherEventKind: () => FileWatcherEventKind,
  FindAllReferences: () => ts_FindAllReferences_exports,
  FlattenLevel: () => FlattenLevel,
  FlowFlags: () => FlowFlags,
  ForegroundColorEscapeSequences: () => ForegroundColorEscapeSequences,
  FunctionFlags: () => FunctionFlags,
  GeneratedIdentifierFlags: () => GeneratedIdentifierFlags,
  GetLiteralTextFlags: () => GetLiteralTextFlags,
  GoToDefinition: () => ts_GoToDefinition_exports,
  HighlightSpanKind: () => HighlightSpanKind,
  IdentifierNameMap: () => IdentifierNameMap,
  ImportKind: () => ImportKind,
  ImportsNotUsedAsValues: () => ImportsNotUsedAsValues,
  IndentStyle: () => IndentStyle,
  IndexFlags: () => IndexFlags,
  IndexKind: () => IndexKind,
  InferenceFlags: () => InferenceFlags,
  InferencePriority: () => InferencePriority,
  InlayHintKind: () => InlayHintKind2,
  InlayHints: () => ts_InlayHints_exports,
  InternalEmitFlags: () => InternalEmitFlags,
  InternalNodeBuilderFlags: () => InternalNodeBuilderFlags,
  InternalSymbolName: () => InternalSymbolName,
  IntersectionFlags: () => IntersectionFlags,
  InvalidatedProjectKind: () => InvalidatedProjectKind,
  JSDocParsingMode: () => JSDocParsingMode,
  JsDoc: () => ts_JsDoc_exports,
  JsTyping: () => ts_JsTyping_exports,
  JsxEmit: () => JsxEmit,
  JsxFlags: () => JsxFlags,
  JsxReferenceKind: () => JsxReferenceKind,
  LanguageFeatureMinimumTarget: () => LanguageFeatureMinimumTarget,
  LanguageServiceMode: () => LanguageServiceMode,
  LanguageVariant: () => LanguageVariant,
  LexicalEnvironmentFlags: () => LexicalEnvironmentFlags,
  ListFormat: () => ListFormat,
  LogLevel: () => LogLevel,
  MapCode: () => ts_MapCode_exports,
  MemberOverrideStatus: () => MemberOverrideStatus,
  ModifierFlags: () => ModifierFlags,
  ModuleDetectionKind: () => ModuleDetectionKind,
  ModuleInstanceState: () => ModuleInstanceState,
  ModuleKind: () => ModuleKind,
  ModuleResolutionKind: () => ModuleResolutionKind,
  ModuleSpecifierEnding: () => ModuleSpecifierEnding,
  NavigateTo: () => ts_NavigateTo_exports,
  NavigationBar: () => ts_NavigationBar_exports,
  NewLineKind: () => NewLineKind,
  NodeBuilderFlags: () => NodeBuilderFlags,
  NodeCheckFlags: () => NodeCheckFlags,
  NodeFactoryFlags: () => NodeFactoryFlags,
  NodeFlags: () => NodeFlags,
  NodeResolutionFeatures: () => NodeResolutionFeatures,
  ObjectFlags: () => ObjectFlags,
  OperationCanceledException: () => OperationCanceledException,
  OperatorPrecedence: () => OperatorPrecedence,
  OrganizeImports: () => ts_OrganizeImports_exports,
  OrganizeImportsMode: () => OrganizeImportsMode,
  OuterExpressionKinds: () => OuterExpressionKinds,
  OutliningElementsCollector: () => ts_OutliningElementsCollector_exports,
  OutliningSpanKind: () => OutliningSpanKind,
  OutputFileType: () => OutputFileType,
  PackageJsonAutoImportPreference: () => PackageJsonAutoImportPreference,
  PackageJsonDependencyGroup: () => PackageJsonDependencyGroup,
  PatternMatchKind: () => PatternMatchKind,
  PollingInterval: () => PollingInterval,
  PollingWatchKind: () => PollingWatchKind,
  PragmaKindFlags: () => PragmaKindFlags,
  PredicateSemantics: () => PredicateSemantics,
  PreparePasteEdits: () => ts_preparePasteEdits_exports,
  PrivateIdentifierKind: () => PrivateIdentifierKind,
  ProcessLevel: () => ProcessLevel,
  ProgramUpdateLevel: () => ProgramUpdateLevel,
  QuotePreference: () => QuotePreference,
  RegularExpressionFlags: () => RegularExpressionFlags,
  RelationComparisonResult: () => RelationComparisonResult,
  Rename: () => ts_Rename_exports,
  ScriptElementKind: () => ScriptElementKind,
  ScriptElementKindModifier: () => ScriptElementKindModifier,
  ScriptKind: () => ScriptKind,
  ScriptSnapshot: () => ScriptSnapshot,
  ScriptTarget: () => ScriptTarget,
  SemanticClassificationFormat: () => SemanticClassificationFormat,
  SemanticMeaning: () => SemanticMeaning,
  SemicolonPreference: () => SemicolonPreference,
  SignatureCheckMode: () => SignatureCheckMode,
  SignatureFlags: () => SignatureFlags,
  SignatureHelp: () => ts_SignatureHelp_exports,
  SignatureInfo: () => SignatureInfo,
  SignatureKind: () => SignatureKind,
  SmartSelectionRange: () => ts_SmartSelectionRange_exports,
  SnippetKind: () => SnippetKind,
  StatisticType: () => StatisticType,
  StructureIsReused: () => StructureIsReused,
  SymbolAccessibility: () => SymbolAccessibility,
  SymbolDisplay: () => ts_SymbolDisplay_exports,
  SymbolDisplayPartKind: () => SymbolDisplayPartKind,
  SymbolFlags: () => SymbolFlags,
  SymbolFormatFlags: () => SymbolFormatFlags,
  SyntaxKind: () => SyntaxKind,
  Ternary: () => Ternary,
  ThrottledCancellationToken: () => ThrottledCancellationToken,
  TokenClass: () => TokenClass,
  TokenFlags: () => TokenFlags,
  TransformFlags: () => TransformFlags,
  TypeFacts: () => TypeFacts,
  TypeFlags: () => TypeFlags,
  TypeFormatFlags: () => TypeFormatFlags,
  TypeMapKind: () => TypeMapKind,
  TypePredicateKind: () => TypePredicateKind,
  TypeReferenceSerializationKind: () => TypeReferenceSerializationKind,
  UnionReduction: () => UnionReduction,
  UpToDateStatusType: () => UpToDateStatusType,
  VarianceFlags: () => VarianceFlags,
  Version: () => Version,
  VersionRange: () => VersionRange,
  WatchDirectoryFlags: () => WatchDirectoryFlags,
  WatchDirectoryKind: () => WatchDirectoryKind,
  WatchFileKind: () => WatchFileKind,
  WatchLogLevel: () => WatchLogLevel,
  WatchType: () => WatchType,
  accessPrivateIdentifier: () => accessPrivateIdentifier,
  addEmitFlags: () => addEmitFlags,
  addEmitHelper: () => addEmitHelper,
  addEmitHelpers: () => addEmitHelpers,
  addInternalEmitFlags: () => addInternalEmitFlags,
  addNodeFactoryPatcher: () => addNodeFactoryPatcher,
  addObjectAllocatorPatcher: () => addObjectAllocatorPatcher,
  addRange: () => addRange,
  addRelatedInfo: () => addRelatedInfo,
  addSyntheticLeadingComment: () => addSyntheticLeadingComment,
  addSyntheticTrailingComment: () => addSyntheticTrailingComment,
  addToSeen: () => addToSeen,
  advancedAsyncSuperHelper: () => advancedAsyncSuperHelper,
  affectsDeclarationPathOptionDeclarations: () => affectsDeclarationPathOptionDeclarations,
  affectsEmitOptionDeclarations: () => affectsEmitOptionDeclarations,
  allKeysStartWithDot: () => allKeysStartWithDot,
  altDirectorySeparator: () => altDirectorySeparator,
  and: () => and,
  append: () => append,
  appendIfUnique: () => appendIfUnique,
  arrayFrom: () => arrayFrom,
  arrayIsEqualTo: () => arrayIsEqualTo,
  arrayIsHomogeneous: () => arrayIsHomogeneous,
  arrayOf: () => arrayOf,
  arrayReverseIterator: () => arrayReverseIterator,
  arrayToMap: () => arrayToMap,
  arrayToMultiMap: () => arrayToMultiMap,
  arrayToNumericMap: () => arrayToNumericMap,
  assertType: () => assertType,
  assign: () => assign,
  asyncSuperHelper: () => asyncSuperHelper,
  attachFileToDiagnostics: () => attachFileToDiagnostics,
  base64decode: () => base64decode,
  base64encode: () => base64encode,
  binarySearch: () => binarySearch,
  binarySearchKey: () => binarySearchKey,
  bindSourceFile: () => bindSourceFile,
  breakIntoCharacterSpans: () => breakIntoCharacterSpans,
  breakIntoWordSpans: () => breakIntoWordSpans,
  buildLinkParts: () => buildLinkParts,
  buildOpts: () => buildOpts,
  buildOverload: () => buildOverload,
  bundlerModuleNameResolver: () => bundlerModuleNameResolver,
  canBeConvertedToAsync: () => canBeConvertedToAsync,
  canHaveDecorators: () => canHaveDecorators,
  canHaveExportModifier: () => canHaveExportModifier,
  canHaveFlowNode: () => canHaveFlowNode,
  canHaveIllegalDecorators: () => canHaveIllegalDecorators,
  canHaveIllegalModifiers: () => canHaveIllegalModifiers,
  canHaveIllegalType: () => canHaveIllegalType,
  canHaveIllegalTypeParameters: () => canHaveIllegalTypeParameters,
  canHaveJSDoc: () => canHaveJSDoc,
  canHaveLocals: () => canHaveLocals,
  canHaveModifiers: () => canHaveModifiers,
  canHaveModuleSpecifier: () => canHaveModuleSpecifier,
  canHaveSymbol: () => canHaveSymbol,
  canIncludeBindAndCheckDiagnostics: () => canIncludeBindAndCheckDiagnostics,
  canJsonReportNoInputFiles: () => canJsonReportNoInputFiles,
  canProduceDiagnostics: () => canProduceDiagnostics,
  canUsePropertyAccess: () => canUsePropertyAccess,
  canWatchAffectingLocation: () => canWatchAffectingLocation,
  canWatchAtTypes: () => canWatchAtTypes,
  canWatchDirectoryOrFile: () => canWatchDirectoryOrFile,
  canWatchDirectoryOrFilePath: () => canWatchDirectoryOrFilePath,
  cartesianProduct: () => cartesianProduct,
  cast: () => cast,
  chainBundle: () => chainBundle,
  chainDiagnosticMessages: () => chainDiagnosticMessages,
  changeAnyExtension: () => changeAnyExtension,
  changeCompilerHostLikeToUseCache: () => changeCompilerHostLikeToUseCache,
  changeExtension: () => changeExtension,
  changeFullExtension: () => changeFullExtension,
  changesAffectModuleResolution: () => changesAffectModuleResolution,
  changesAffectingProgramStructure: () => changesAffectingProgramStructure,
  characterCodeToRegularExpressionFlag: () => characterCodeToRegularExpressionFlag,
  childIsDecorated: () => childIsDecorated,
  classElementOrClassElementParameterIsDecorated: () => classElementOrClassElementParameterIsDecorated,
  classHasClassThisAssignment: () => classHasClassThisAssignment,
  classHasDeclaredOrExplicitlyAssignedName: () => classHasDeclaredOrExplicitlyAssignedName,
  classHasExplicitlyAssignedName: () => classHasExplicitlyAssignedName,
  classOrConstructorParameterIsDecorated: () => classOrConstructorParameterIsDecorated,
  classicNameResolver: () => classicNameResolver,
  classifier: () => ts_classifier_exports,
  cleanExtendedConfigCache: () => cleanExtendedConfigCache,
  clear: () => clear,
  clearMap: () => clearMap,
  clearSharedExtendedConfigFileWatcher: () => clearSharedExtendedConfigFileWatcher,
  climbPastPropertyAccess: () => climbPastPropertyAccess,
  clone: () => clone,
  cloneCompilerOptions: () => cloneCompilerOptions,
  closeFileWatcher: () => closeFileWatcher,
  closeFileWatcherOf: () => closeFileWatcherOf,
  codefix: () => ts_codefix_exports,
  collapseTextChangeRangesAcrossMultipleVersions: () => collapseTextChangeRangesAcrossMultipleVersions,
  collectExternalModuleInfo: () => collectExternalModuleInfo,
  combine: () => combine,
  combinePaths: () => combinePaths,
  commandLineOptionOfCustomType: () => commandLineOptionOfCustomType,
  commentPragmas: () => commentPragmas,
  commonOptionsWithBuild: () => commonOptionsWithBuild,
  compact: () => compact,
  compareBooleans: () => compareBooleans,
  compareDataObjects: () => compareDataObjects,
  compareDiagnostics: () => compareDiagnostics,
  compareEmitHelpers: () => compareEmitHelpers,
  compareNumberOfDirectorySeparators: () => compareNumberOfDirectorySeparators,
  comparePaths: () => comparePaths,
  comparePathsCaseInsensitive: () => comparePathsCaseInsensitive,
  comparePathsCaseSensitive: () => comparePathsCaseSensitive,
  comparePatternKeys: () => comparePatternKeys,
  compareProperties: () => compareProperties,
  compareStringsCaseInsensitive: () => compareStringsCaseInsensitive,
  compareStringsCaseInsensitiveEslintCompatible: () => compareStringsCaseInsensitiveEslintCompatible,
  compareStringsCaseSensitive: () => compareStringsCaseSensitive,
  compareStringsCaseSensitiveUI: () => compareStringsCaseSensitiveUI,
  compareTextSpans: () => compareTextSpans,
  compareValues: () => compareValues,
  compilerOptionsAffectDeclarationPath: () => compilerOptionsAffectDeclarationPath,
  compilerOptionsAffectEmit: () => compilerOptionsAffectEmit,
  compilerOptionsAffectSemanticDiagnostics: () => compilerOptionsAffectSemanticDiagnostics,
  compilerOptionsDidYouMeanDiagnostics: () => compilerOptionsDidYouMeanDiagnostics,
  compilerOptionsIndicateEsModules: () => compilerOptionsIndicateEsModules,
  computeCommonSourceDirectoryOfFilenames: () => computeCommonSourceDirectoryOfFilenames,
  computeLineAndCharacterOfPosition: () => computeLineAndCharacterOfPosition,
  computeLineOfPosition: () => computeLineOfPosition,
  computeLineStarts: () => computeLineStarts,
  computePositionOfLineAndCharacter: () => computePositionOfLineAndCharacter,
  computeSignatureWithDiagnostics: () => computeSignatureWithDiagnostics,
  computeSuggestionDiagnostics: () => computeSuggestionDiagnostics,
  computedOptions: () => computedOptions,
  concatenate: () => concatenate,
  concatenateDiagnosticMessageChains: () => concatenateDiagnosticMessageChains,
  consumesNodeCoreModules: () => consumesNodeCoreModules,
  contains: () => contains,
  containsIgnoredPath: () => containsIgnoredPath,
  containsObjectRestOrSpread: () => containsObjectRestOrSpread,
  containsParseError: () => containsParseError,
  containsPath: () => containsPath,
  convertCompilerOptionsForTelemetry: () => convertCompilerOptionsForTelemetry,
  convertCompilerOptionsFromJson: () => convertCompilerOptionsFromJson,
  convertJsonOption: () => convertJsonOption,
  convertToBase64: () => convertToBase64,
  convertToJson: () => convertToJson,
  convertToObject: () => convertToObject,
  convertToOptionsWithAbsolutePaths: () => convertToOptionsWithAbsolutePaths,
  convertToRelativePath: () => convertToRelativePath,
  convertToTSConfig: () => convertToTSConfig,
  convertTypeAcquisitionFromJson: () => convertTypeAcquisitionFromJson,
  copyComments: () => copyComments,
  copyEntries: () => copyEntries,
  copyLeadingComments: () => copyLeadingComments,
  copyProperties: () => copyProperties,
  copyTrailingAsLeadingComments: () => copyTrailingAsLeadingComments,
  copyTrailingComments: () => copyTrailingComments,
  couldStartTrivia: () => couldStartTrivia,
  countWhere: () => countWhere,
  createAbstractBuilder: () => createAbstractBuilder,
  createAccessorPropertyBackingField: () => createAccessorPropertyBackingField,
  createAccessorPropertyGetRedirector: () => createAccessorPropertyGetRedirector,
  createAccessorPropertySetRedirector: () => createAccessorPropertySetRedirector,
  createBaseNodeFactory: () => createBaseNodeFactory,
  createBinaryExpressionTrampoline: () => createBinaryExpressionTrampoline,
  createBuilderProgram: () => createBuilderProgram,
  createBuilderProgramUsingIncrementalBuildInfo: () => createBuilderProgramUsingIncrementalBuildInfo,
  createBuilderStatusReporter: () => createBuilderStatusReporter,
  createCacheableExportInfoMap: () => createCacheableExportInfoMap,
  createCachedDirectoryStructureHost: () => createCachedDirectoryStructureHost,
  createClassifier: () => createClassifier,
  createCommentDirectivesMap: () => createCommentDirectivesMap,
  createCompilerDiagnostic: () => createCompilerDiagnostic,
  createCompilerDiagnosticForInvalidCustomType: () => createCompilerDiagnosticForInvalidCustomType,
  createCompilerDiagnosticFromMessageChain: () => createCompilerDiagnosticFromMessageChain,
  createCompilerHost: () => createCompilerHost,
  createCompilerHostFromProgramHost: () => createCompilerHostFromProgramHost,
  createCompilerHostWorker: () => createCompilerHostWorker,
  createDetachedDiagnostic: () => createDetachedDiagnostic,
  createDiagnosticCollection: () => createDiagnosticCollection,
  createDiagnosticForFileFromMessageChain: () => createDiagnosticForFileFromMessageChain,
  createDiagnosticForNode: () => createDiagnosticForNode,
  createDiagnosticForNodeArray: () => createDiagnosticForNodeArray,
  createDiagnosticForNodeArrayFromMessageChain: () => createDiagnosticForNodeArrayFromMessageChain,
  createDiagnosticForNodeFromMessageChain: () => createDiagnosticForNodeFromMessageChain,
  createDiagnosticForNodeInSourceFile: () => createDiagnosticForNodeInSourceFile,
  createDiagnosticForRange: () => createDiagnosticForRange,
  createDiagnosticMessageChainFromDiagnostic: () => createDiagnosticMessageChainFromDiagnostic,
  createDiagnosticReporter: () => createDiagnosticReporter,
  createDocumentPositionMapper: () => createDocumentPositionMapper,
  createDocumentRegistry: () => createDocumentRegistry,
  createDocumentRegistryInternal: () => createDocumentRegistryInternal,
  createEmitAndSemanticDiagnosticsBuilderProgram: () => createEmitAndSemanticDiagnosticsBuilderProgram,
  createEmitHelperFactory: () => createEmitHelperFactory,
  createEmptyExports: () => createEmptyExports,
  createEvaluator: () => createEvaluator,
  createExpressionForJsxElement: () => createExpressionForJsxElement,
  createExpressionForJsxFragment: () => createExpressionForJsxFragment,
  createExpressionForObjectLiteralElementLike: () => createExpressionForObjectLiteralElementLike,
  createExpressionForPropertyName: () => createExpressionForPropertyName,
  createExpressionFromEntityName: () => createExpressionFromEntityName,
  createExternalHelpersImportDeclarationIfNeeded: () => createExternalHelpersImportDeclarationIfNeeded,
  createFileDiagnostic: () => createFileDiagnostic,
  createFileDiagnosticFromMessageChain: () => createFileDiagnosticFromMessageChain,
  createFlowNode: () => createFlowNode,
  createForOfBindingStatement: () => createForOfBindingStatement,
  createFutureSourceFile: () => createFutureSourceFile,
  createGetCanonicalFileName: () => createGetCanonicalFileName,
  createGetIsolatedDeclarationErrors: () => createGetIsolatedDeclarationErrors,
  createGetSourceFile: () => createGetSourceFile,
  createGetSymbolAccessibilityDiagnosticForNode: () => createGetSymbolAccessibilityDiagnosticForNode,
  createGetSymbolAccessibilityDiagnosticForNodeName: () => createGetSymbolAccessibilityDiagnosticForNodeName,
  createGetSymbolWalker: () => createGetSymbolWalker,
  createIncrementalCompilerHost: () => createIncrementalCompilerHost,
  createIncrementalProgram: () => createIncrementalProgram,
  createJsxFactoryExpression: () => createJsxFactoryExpression,
  createLanguageService: () => createLanguageService,
  createLanguageServiceSourceFile: () => createLanguageServiceSourceFile,
  createMemberAccessForPropertyName: () => createMemberAccessForPropertyName,
  createModeAwareCache: () => createModeAwareCache,
  createModeAwareCacheKey: () => createModeAwareCacheKey,
  createModeMismatchDetails: () => createModeMismatchDetails,
  createModuleNotFoundChain: () => createModuleNotFoundChain,
  createModuleResolutionCache: () => createModuleResolutionCache,
  createModuleResolutionLoader: () => createModuleResolutionLoader,
  createModuleResolutionLoaderUsingGlobalCache: () => createModuleResolutionLoaderUsingGlobalCache,
  createModuleSpecifierResolutionHost: () => createModuleSpecifierResolutionHost,
  createMultiMap: () => createMultiMap,
  createNameResolver: () => createNameResolver,
  createNodeConverters: () => createNodeConverters,
  createNodeFactory: () => createNodeFactory,
  createOptionNameMap: () => createOptionNameMap,
  createOverload: () => createOverload,
  createPackageJsonImportFilter: () => createPackageJsonImportFilter,
  createPackageJsonInfo: () => createPackageJsonInfo,
  createParenthesizerRules: () => createParenthesizerRules,
  createPatternMatcher: () => createPatternMatcher,
  createPrinter: () => createPrinter,
  createPrinterWithDefaults: () => createPrinterWithDefaults,
  createPrinterWithRemoveComments: () => createPrinterWithRemoveComments,
  createPrinterWithRemoveCommentsNeverAsciiEscape: () => createPrinterWithRemoveCommentsNeverAsciiEscape,
  createPrinterWithRemoveCommentsOmitTrailingSemicolon: () => createPrinterWithRemoveCommentsOmitTrailingSemicolon,
  createProgram: () => createProgram,
  createProgramDiagnostics: () => createProgramDiagnostics,
  createProgramHost: () => createProgramHost,
  createPropertyNameNodeForIdentifierOrLiteral: () => createPropertyNameNodeForIdentifierOrLiteral,
  createQueue: () => createQueue,
  createRange: () => createRange,
  createRedirectedBuilderProgram: () => createRedirectedBuilderProgram,
  createResolutionCache: () => createResolutionCache,
  createRuntimeTypeSerializer: () => createRuntimeTypeSerializer,
  createScanner: () => createScanner,
  createSemanticDiagnosticsBuilderProgram: () => createSemanticDiagnosticsBuilderProgram,
  createSet: () => createSet,
  createSolutionBuilder: () => createSolutionBuilder,
  createSolutionBuilderHost: () => createSolutionBuilderHost,
  createSolutionBuilderWithWatch: () => createSolutionBuilderWithWatch,
  createSolutionBuilderWithWatchHost: () => createSolutionBuilderWithWatchHost,
  createSortedArray: () => createSortedArray,
  createSourceFile: () => createSourceFile,
  createSourceMapGenerator: () => createSourceMapGenerator,
  createSourceMapSource: () => createSourceMapSource,
  createSuperAccessVariableStatement: () => createSuperAccessVariableStatement,
  createSymbolTable: () => createSymbolTable,
  createSymlinkCache: () => createSymlinkCache,
  createSyntacticTypeNodeBuilder: () => createSyntacticTypeNodeBuilder,
  createSystemWatchFunctions: () => createSystemWatchFunctions,
  createTextChange: () => createTextChange,
  createTextChangeFromStartLength: () => createTextChangeFromStartLength,
  createTextChangeRange: () => createTextChangeRange,
  createTextRangeFromNode: () => createTextRangeFromNode,
  createTextRangeFromSpan: () => createTextRangeFromSpan,
  createTextSpan: () => createTextSpan,
  createTextSpanFromBounds: () => createTextSpanFromBounds,
  createTextSpanFromNode: () => createTextSpanFromNode,
  createTextSpanFromRange: () => createTextSpanFromRange,
  createTextSpanFromStringLiteralLikeContent: () => createTextSpanFromStringLiteralLikeContent,
  createTextWriter: () => createTextWriter,
  createTokenRange: () => createTokenRange,
  createTypeChecker: () => createTypeChecker,
  createTypeReferenceDirectiveResolutionCache: () => createTypeReferenceDirectiveResolutionCache,
  createTypeReferenceResolutionLoader: () => createTypeReferenceResolutionLoader,
  createWatchCompilerHost: () => createWatchCompilerHost2,
  createWatchCompilerHostOfConfigFile: () => createWatchCompilerHostOfConfigFile,
  createWatchCompilerHostOfFilesAndCompilerOptions: () => createWatchCompilerHostOfFilesAndCompilerOptions,
  createWatchFactory: () => createWatchFactory,
  createWatchHost: () => createWatchHost,
  createWatchProgram: () => createWatchProgram,
  createWatchStatusReporter: () => createWatchStatusReporter,
  createWriteFileMeasuringIO: () => createWriteFileMeasuringIO,
  declarationNameToString: () => declarationNameToString,
  decodeMappings: () => decodeMappings,
  decodedTextSpanIntersectsWith: () => decodedTextSpanIntersectsWith,
  deduplicate: () => deduplicate,
  defaultInitCompilerOptions: () => defaultInitCompilerOptions,
  defaultMaximumTruncationLength: () => defaultMaximumTruncationLength,
  diagnosticCategoryName: () => diagnosticCategoryName,
  diagnosticToString: () => diagnosticToString,
  diagnosticsEqualityComparer: () => diagnosticsEqualityComparer,
  directoryProbablyExists: () => directoryProbablyExists,
  directorySeparator: () => directorySeparator,
  displayPart: () => displayPart,
  displayPartsToString: () => displayPartsToString,
  disposeEmitNodes: () => disposeEmitNodes,
  documentSpansEqual: () => documentSpansEqual,
  dumpTracingLegend: () => dumpTracingLegend,
  elementAt: () => elementAt,
  elideNodes: () => elideNodes,
  emitDetachedComments: () => emitDetachedComments,
  emitFiles: () => emitFiles,
  emitFilesAndReportErrors: () => emitFilesAndReportErrors,
  emitFilesAndReportErrorsAndGetExitStatus: () => emitFilesAndReportErrorsAndGetExitStatus,
  emitModuleKindIsNonNodeESM: () => emitModuleKindIsNonNodeESM,
  emitNewLineBeforeLeadingCommentOfPosition: () => emitNewLineBeforeLeadingCommentOfPosition,
  emitResolverSkipsTypeChecking: () => emitResolverSkipsTypeChecking,
  emitSkippedWithNoDiagnostics: () => emitSkippedWithNoDiagnostics,
  emptyArray: () => emptyArray,
  emptyFileSystemEntries: () => emptyFileSystemEntries,
  emptyMap: () => emptyMap,
  emptyOptions: () => emptyOptions,
  endsWith: () => endsWith,
  ensurePathIsNonModuleName: () => ensurePathIsNonModuleName,
  ensureScriptKind: () => ensureScriptKind,
  ensureTrailingDirectorySeparator: () => ensureTrailingDirectorySeparator,
  entityNameToString: () => entityNameToString,
  enumerateInsertsAndDeletes: () => enumerateInsertsAndDeletes,
  equalOwnProperties: () => equalOwnProperties,
  equateStringsCaseInsensitive: () => equateStringsCaseInsensitive,
  equateStringsCaseSensitive: () => equateStringsCaseSensitive,
  equateValues: () => equateValues,
  escapeJsxAttributeString: () => escapeJsxAttributeString,
  escapeLeadingUnderscores: () => escapeLeadingUnderscores,
  escapeNonAsciiString: () => escapeNonAsciiString,
  escapeSnippetText: () => escapeSnippetText,
  escapeString: () => escapeString,
  escapeTemplateSubstitution: () => escapeTemplateSubstitution,
  evaluatorResult: () => evaluatorResult,
  every: () => every,
  exclusivelyPrefixedNodeCoreModules: () => exclusivelyPrefixedNodeCoreModules,
  executeCommandLine: () => executeCommandLine,
  expandPreOrPostfixIncrementOrDecrementExpression: () => expandPreOrPostfixIncrementOrDecrementExpression,
  explainFiles: () => explainFiles,
  explainIfFileIsRedirectAndImpliedFormat: () => explainIfFileIsRedirectAndImpliedFormat,
  exportAssignmentIsAlias: () => exportAssignmentIsAlias,
  expressionResultIsUnused: () => expressionResultIsUnused,
  extend: () => extend,
  extensionFromPath: () => extensionFromPath,
  extensionIsTS: () => extensionIsTS,
  extensionsNotSupportingExtensionlessResolution: () => extensionsNotSupportingExtensionlessResolution,
  externalHelpersModuleNameText: () => externalHelpersModuleNameText,
  factory: () => factory,
  fileExtensionIs: () => fileExtensionIs,
  fileExtensionIsOneOf: () => fileExtensionIsOneOf,
  fileIncludeReasonToDiagnostics: () => fileIncludeReasonToDiagnostics,
  fileShouldUseJavaScriptRequire: () => fileShouldUseJavaScriptRequire,
  filter: () => filter,
  filterMutate: () => filterMutate,
  filterSemanticDiagnostics: () => filterSemanticDiagnostics,
  find: () => find,
  findAncestor: () => findAncestor,
  findBestPatternMatch: () => findBestPatternMatch,
  findChildOfKind: () => findChildOfKind,
  findComputedPropertyNameCacheAssignment: () => findComputedPropertyNameCacheAssignment,
  findConfigFile: () => findConfigFile,
  findConstructorDeclaration: () => findConstructorDeclaration,
  findContainingList: () => findContainingList,
  findDiagnosticForNode: () => findDiagnosticForNode,
  findFirstNonJsxWhitespaceToken: () => findFirstNonJsxWhitespaceToken,
  findIndex: () => findIndex,
  findLast: () => findLast,
  findLastIndex: () => findLastIndex,
  findListItemInfo: () => findListItemInfo,
  findModifier: () => findModifier,
  findNextToken: () => findNextToken,
  findPackageJson: () => findPackageJson,
  findPackageJsons: () => findPackageJsons,
  findPrecedingMatchingToken: () => findPrecedingMatchingToken,
  findPrecedingToken: () => findPrecedingToken,
  findSuperStatementIndexPath: () => findSuperStatementIndexPath,
  findTokenOnLeftOfPosition: () => findTokenOnLeftOfPosition,
  findUseStrictPrologue: () => findUseStrictPrologue,
  first: () => first,
  firstDefined: () => firstDefined,
  firstDefinedIterator: () => firstDefinedIterator,
  firstIterator: () => firstIterator,
  firstOrOnly: () => firstOrOnly,
  firstOrUndefined: () => firstOrUndefined,
  firstOrUndefinedIterator: () => firstOrUndefinedIterator,
  fixupCompilerOptions: () => fixupCompilerOptions,
  flatMap: () => flatMap,
  flatMapIterator: () => flatMapIterator,
  flatMapToMutable: () => flatMapToMutable,
  flatten: () => flatten,
  flattenCommaList: () => flattenCommaList,
  flattenDestructuringAssignment: () => flattenDestructuringAssignment,
  flattenDestructuringBinding: () => flattenDestructuringBinding,
  flattenDiagnosticMessageText: () => flattenDiagnosticMessageText,
  forEach: () => forEach,
  forEachAncestor: () => forEachAncestor,
  forEachAncestorDirectory: () => forEachAncestorDirectory,
  forEachAncestorDirectoryStoppingAtGlobalCache: () => forEachAncestorDirectoryStoppingAtGlobalCache,
  forEachChild: () => forEachChild,
  forEachChildRecursively: () => forEachChildRecursively,
  forEachDynamicImportOrRequireCall: () => forEachDynamicImportOrRequireCall,
  forEachEmittedFile: () => forEachEmittedFile,
  forEachEnclosingBlockScopeContainer: () => forEachEnclosingBlockScopeContainer,
  forEachEntry: () => forEachEntry,
  forEachExternalModuleToImportFrom: () => forEachExternalModuleToImportFrom,
  forEachImportClauseDeclaration: () => forEachImportClauseDeclaration,
  forEachKey: () => forEachKey,
  forEachLeadingCommentRange: () => forEachLeadingCommentRange,
  forEachNameInAccessChainWalkingLeft: () => forEachNameInAccessChainWalkingLeft,
  forEachNameOfDefaultExport: () => forEachNameOfDefaultExport,
  forEachOptionsSyntaxByName: () => forEachOptionsSyntaxByName,
  forEachProjectReference: () => forEachProjectReference,
  forEachPropertyAssignment: () => forEachPropertyAssignment,
  forEachResolvedProjectReference: () => forEachResolvedProjectReference,
  forEachReturnStatement: () => forEachReturnStatement,
  forEachRight: () => forEachRight,
  forEachTrailingCommentRange: () => forEachTrailingCommentRange,
  forEachTsConfigPropArray: () => forEachTsConfigPropArray,
  forEachUnique: () => forEachUnique,
  forEachYieldExpression: () => forEachYieldExpression,
  formatColorAndReset: () => formatColorAndReset,
  formatDiagnostic: () => formatDiagnostic,
  formatDiagnostics: () => formatDiagnostics,
  formatDiagnosticsWithColorAndContext: () => formatDiagnosticsWithColorAndContext,
  formatGeneratedName: () => formatGeneratedName,
  formatGeneratedNamePart: () => formatGeneratedNamePart,
  formatLocation: () => formatLocation,
  formatMessage: () => formatMessage,
  formatStringFromArgs: () => formatStringFromArgs,
  formatting: () => ts_formatting_exports,
  generateDjb2Hash: () => generateDjb2Hash,
  generateTSConfig: () => generateTSConfig,
  getAdjustedReferenceLocation: () => getAdjustedReferenceLocation,
  getAdjustedRenameLocation: () => getAdjustedRenameLocation,
  getAliasDeclarationFromName: () => getAliasDeclarationFromName,
  getAllAccessorDeclarations: () => getAllAccessorDeclarations,
  getAllDecoratorsOfClass: () => getAllDecoratorsOfClass,
  getAllDecoratorsOfClassElement: () => getAllDecoratorsOfClassElement,
  getAllJSDocTags: () => getAllJSDocTags,
  getAllJSDocTagsOfKind: () => getAllJSDocTagsOfKind,
  getAllKeys: () => getAllKeys,
  getAllProjectOutputs: () => getAllProjectOutputs,
  getAllSuperTypeNodes: () => getAllSuperTypeNodes,
  getAllowImportingTsExtensions: () => getAllowImportingTsExtensions,
  getAllowJSCompilerOption: () => getAllowJSCompilerOption,
  getAllowSyntheticDefaultImports: () => getAllowSyntheticDefaultImports,
  getAncestor: () => getAncestor,
  getAnyExtensionFromPath: () => getAnyExtensionFromPath,
  getAreDeclarationMapsEnabled: () => getAreDeclarationMapsEnabled,
  getAssignedExpandoInitializer: () => getAssignedExpandoInitializer,
  getAssignedName: () => getAssignedName,
  getAssignmentDeclarationKind: () => getAssignmentDeclarationKind,
  getAssignmentDeclarationPropertyAccessKind: () => getAssignmentDeclarationPropertyAccessKind,
  getAssignmentTargetKind: () => getAssignmentTargetKind,
  getAutomaticTypeDirectiveNames: () => getAutomaticTypeDirectiveNames,
  getBaseFileName: () => getBaseFileName,
  getBinaryOperatorPrecedence: () => getBinaryOperatorPrecedence,
  getBuildInfo: () => getBuildInfo,
  getBuildInfoFileVersionMap: () => getBuildInfoFileVersionMap,
  getBuildInfoText: () => getBuildInfoText,
  getBuildOrderFromAnyBuildOrder: () => getBuildOrderFromAnyBuildOrder,
  getBuilderCreationParameters: () => getBuilderCreationParameters,
  getBuilderFileEmit: () => getBuilderFileEmit,
  getCanonicalDiagnostic: () => getCanonicalDiagnostic,
  getCheckFlags: () => getCheckFlags,
  getClassExtendsHeritageElement: () => getClassExtendsHeritageElement,
  getClassLikeDeclarationOfSymbol: () => getClassLikeDeclarationOfSymbol,
  getCombinedLocalAndExportSymbolFlags: () => getCombinedLocalAndExportSymbolFlags,
  getCombinedModifierFlags: () => getCombinedModifierFlags,
  getCombinedNodeFlags: () => getCombinedNodeFlags,
  getCombinedNodeFlagsAlwaysIncludeJSDoc: () => getCombinedNodeFlagsAlwaysIncludeJSDoc,
  getCommentRange: () => getCommentRange,
  getCommonSourceDirectory: () => getCommonSourceDirectory,
  getCommonSourceDirectoryOfConfig: () => getCommonSourceDirectoryOfConfig,
  getCompilerOptionValue: () => getCompilerOptionValue,
  getCompilerOptionsDiffValue: () => getCompilerOptionsDiffValue,
  getConditions: () => getConditions,
  getConfigFileParsingDiagnostics: () => getConfigFileParsingDiagnostics,
  getConstantValue: () => getConstantValue,
  getContainerFlags: () => getContainerFlags,
  getContainerNode: () => getContainerNode,
  getContainingClass: () => getContainingClass,
  getContainingClassExcludingClassDecorators: () => getContainingClassExcludingClassDecorators,
  getContainingClassStaticBlock: () => getContainingClassStaticBlock,
  getContainingFunction: () => getContainingFunction,
  getContainingFunctionDeclaration: () => getContainingFunctionDeclaration,
  getContainingFunctionOrClassStaticBlock: () => getContainingFunctionOrClassStaticBlock,
  getContainingNodeArray: () => getContainingNodeArray,
  getContainingObjectLiteralElement: () => getContainingObjectLiteralElement,
  getContextualTypeFromParent: () => getContextualTypeFromParent,
  getContextualTypeFromParentOrAncestorTypeNode: () => getContextualTypeFromParentOrAncestorTypeNode,
  getDeclarationDiagnostics: () => getDeclarationDiagnostics,
  getDeclarationEmitExtensionForPath: () => getDeclarationEmitExtensionForPath,
  getDeclarationEmitOutputFilePath: () => getDeclarationEmitOutputFilePath,
  getDeclarationEmitOutputFilePathWorker: () => getDeclarationEmitOutputFilePathWorker,
  getDeclarationFileExtension: () => getDeclarationFileExtension,
  getDeclarationFromName: () => getDeclarationFromName,
  getDeclarationModifierFlagsFromSymbol: () => getDeclarationModifierFlagsFromSymbol,
  getDeclarationOfKind: () => getDeclarationOfKind,
  getDeclarationsOfKind: () => getDeclarationsOfKind,
  getDeclaredExpandoInitializer: () => getDeclaredExpandoInitializer,
  getDecorators: () => getDecorators,
  getDefaultCompilerOptions: () => getDefaultCompilerOptions2,
  getDefaultFormatCodeSettings: () => getDefaultFormatCodeSettings,
  getDefaultLibFileName: () => getDefaultLibFileName,
  getDefaultLibFilePath: () => getDefaultLibFilePath,
  getDefaultLikeExportInfo: () => getDefaultLikeExportInfo,
  getDefaultLikeExportNameFromDeclaration: () => getDefaultLikeExportNameFromDeclaration,
  getDefaultResolutionModeForFileWorker: () => getDefaultResolutionModeForFileWorker,
  getDiagnosticText: () => getDiagnosticText,
  getDiagnosticsWithinSpan: () => getDiagnosticsWithinSpan,
  getDirectoryPath: () => getDirectoryPath,
  getDirectoryToWatchFailedLookupLocation: () => getDirectoryToWatchFailedLookupLocation,
  getDirectoryToWatchFailedLookupLocationFromTypeRoot: () => getDirectoryToWatchFailedLookupLocationFromTypeRoot,
  getDocumentPositionMapper: () => getDocumentPositionMapper,
  getDocumentSpansEqualityComparer: () => getDocumentSpansEqualityComparer,
  getESModuleInterop: () => getESModuleInterop,
  getEditsForFileRename: () => getEditsForFileRename,
  getEffectiveBaseTypeNode: () => getEffectiveBaseTypeNode,
  getEffectiveConstraintOfTypeParameter: () => getEffectiveConstraintOfTypeParameter,
  getEffectiveContainerForJSDocTemplateTag: () => getEffectiveContainerForJSDocTemplateTag,
  getEffectiveImplementsTypeNodes: () => getEffectiveImplementsTypeNodes,
  getEffectiveInitializer: () => getEffectiveInitializer,
  getEffectiveJSDocHost: () => getEffectiveJSDocHost,
  getEffectiveModifierFlags: () => getEffectiveModifierFlags,
  getEffectiveModifierFlagsAlwaysIncludeJSDoc: () => getEffectiveModifierFlagsAlwaysIncludeJSDoc,
  getEffectiveModifierFlagsNoCache: () => getEffectiveModifierFlagsNoCache,
  getEffectiveReturnTypeNode: () => getEffectiveReturnTypeNode,
  getEffectiveSetAccessorTypeAnnotationNode: () => getEffectiveSetAccessorTypeAnnotationNode,
  getEffectiveTypeAnnotationNode: () => getEffectiveTypeAnnotationNode,
  getEffectiveTypeParameterDeclarations: () => getEffectiveTypeParameterDeclarations,
  getEffectiveTypeRoots: () => getEffectiveTypeRoots,
  getElementOrPropertyAccessArgumentExpressionOrName: () => getElementOrPropertyAccessArgumentExpressionOrName,
  getElementOrPropertyAccessName: () => getElementOrPropertyAccessName,
  getElementsOfBindingOrAssignmentPattern: () => getElementsOfBindingOrAssignmentPattern,
  getEmitDeclarations: () => getEmitDeclarations,
  getEmitFlags: () => getEmitFlags,
  getEmitHelpers: () => getEmitHelpers,
  getEmitModuleDetectionKind: () => getEmitModuleDetectionKind,
  getEmitModuleFormatOfFileWorker: () => getEmitModuleFormatOfFileWorker,
  getEmitModuleKind: () => getEmitModuleKind,
  getEmitModuleResolutionKind: () => getEmitModuleResolutionKind,
  getEmitScriptTarget: () => getEmitScriptTarget,
  getEmitStandardClassFields: () => getEmitStandardClassFields,
  getEnclosingBlockScopeContainer: () => getEnclosingBlockScopeContainer,
  getEnclosingContainer: () => getEnclosingContainer,
  getEncodedSemanticClassifications: () => getEncodedSemanticClassifications,
  getEncodedSyntacticClassifications: () => getEncodedSyntacticClassifications,
  getEndLinePosition: () => getEndLinePosition,
  getEntityNameFromTypeNode: () => getEntityNameFromTypeNode,
  getEntrypointsFromPackageJsonInfo: () => getEntrypointsFromPackageJsonInfo,
  getErrorCountForSummary: () => getErrorCountForSummary,
  getErrorSpanForNode: () => getErrorSpanForNode,
  getErrorSummaryText: () => getErrorSummaryText,
  getEscapedTextOfIdentifierOrLiteral: () => getEscapedTextOfIdentifierOrLiteral,
  getEscapedTextOfJsxAttributeName: () => getEscapedTextOfJsxAttributeName,
  getEscapedTextOfJsxNamespacedName: () => getEscapedTextOfJsxNamespacedName,
  getExpandoInitializer: () => getExpandoInitializer,
  getExportAssignmentExpression: () => getExportAssignmentExpression,
  getExportInfoMap: () => getExportInfoMap,
  getExportNeedsImportStarHelper: () => getExportNeedsImportStarHelper,
  getExpressionAssociativity: () => getExpressionAssociativity,
  getExpressionPrecedence: () => getExpressionPrecedence,
  getExternalHelpersModuleName: () => getExternalHelpersModuleName,
  getExternalModuleImportEqualsDeclarationExpression: () => getExternalModuleImportEqualsDeclarationExpression,
  getExternalModuleName: () => getExternalModuleName,
  getExternalModuleNameFromDeclaration: () => getExternalModuleNameFromDeclaration,
  getExternalModuleNameFromPath: () => getExternalModuleNameFromPath,
  getExternalModuleNameLiteral: () => getExternalModuleNameLiteral,
  getExternalModuleRequireArgument: () => getExternalModuleRequireArgument,
  getFallbackOptions: () => getFallbackOptions,
  getFileEmitOutput: () => getFileEmitOutput,
  getFileMatcherPatterns: () => getFileMatcherPatterns,
  getFileNamesFromConfigSpecs: () => getFileNamesFromConfigSpecs,
  getFileWatcherEventKind: () => getFileWatcherEventKind,
  getFilesInErrorForSummary: () => getFilesInErrorForSummary,
  getFirstConstructorWithBody: () => getFirstConstructorWithBody,
  getFirstIdentifier: () => getFirstIdentifier,
  getFirstNonSpaceCharacterPosition: () => getFirstNonSpaceCharacterPosition,
  getFirstProjectOutput: () => getFirstProjectOutput,
  getFixableErrorSpanExpression: () => getFixableErrorSpanExpression,
  getFormatCodeSettingsForWriting: () => getFormatCodeSettingsForWriting,
  getFullWidth: () => getFullWidth,
  getFunctionFlags: () => getFunctionFlags,
  getHeritageClause: () => getHeritageClause,
  getHostSignatureFromJSDoc: () => getHostSignatureFromJSDoc,
  getIdentifierAutoGenerate: () => getIdentifierAutoGenerate,
  getIdentifierGeneratedImportReference: () => getIdentifierGeneratedImportReference,
  getIdentifierTypeArguments: () => getIdentifierTypeArguments,
  getImmediatelyInvokedFunctionExpression: () => getImmediatelyInvokedFunctionExpression,
  getImpliedNodeFormatForEmitWorker: () => getImpliedNodeFormatForEmitWorker,
  getImpliedNodeFormatForFile: () => getImpliedNodeFormatForFile,
  getImpliedNodeFormatForFileWorker: () => getImpliedNodeFormatForFileWorker,
  getImportNeedsImportDefaultHelper: () => getImportNeedsImportDefaultHelper,
  getImportNeedsImportStarHelper: () => getImportNeedsImportStarHelper,
  getIndentString: () => getIndentString,
  getInferredLibraryNameResolveFrom: () => getInferredLibraryNameResolveFrom,
  getInitializedVariables: () => getInitializedVariables,
  getInitializerOfBinaryExpression: () => getInitializerOfBinaryExpression,
  getInitializerOfBindingOrAssignmentElement: () => getInitializerOfBindingOrAssignmentElement,
  getInterfaceBaseTypeNodes: () => getInterfaceBaseTypeNodes,
  getInternalEmitFlags: () => getInternalEmitFlags,
  getInvokedExpression: () => getInvokedExpression,
  getIsFileExcluded: () => getIsFileExcluded,
  getIsolatedModules: () => getIsolatedModules,
  getJSDocAugmentsTag: () => getJSDocAugmentsTag,
  getJSDocClassTag: () => getJSDocClassTag,
  getJSDocCommentRanges: () => getJSDocCommentRanges,
  getJSDocCommentsAndTags: () => getJSDocCommentsAndTags,
  getJSDocDeprecatedTag: () => getJSDocDeprecatedTag,
  getJSDocDeprecatedTagNoCache: () => getJSDocDeprecatedTagNoCache,
  getJSDocEnumTag: () => getJSDocEnumTag,
  getJSDocHost: () => getJSDocHost,
  getJSDocImplementsTags: () => getJSDocImplementsTags,
  getJSDocOverloadTags: () => getJSDocOverloadTags,
  getJSDocOverrideTagNoCache: () => getJSDocOverrideTagNoCache,
  getJSDocParameterTags: () => getJSDocParameterTags,
  getJSDocParameterTagsNoCache: () => getJSDocParameterTagsNoCache,
  getJSDocPrivateTag: () => getJSDocPrivateTag,
  getJSDocPrivateTagNoCache: () => getJSDocPrivateTagNoCache,
  getJSDocProtectedTag: () => getJSDocProtectedTag,
  getJSDocProtectedTagNoCache: () => getJSDocProtectedTagNoCache,
  getJSDocPublicTag: () => getJSDocPublicTag,
  getJSDocPublicTagNoCache: () => getJSDocPublicTagNoCache,
  getJSDocReadonlyTag: () => getJSDocReadonlyTag,
  getJSDocReadonlyTagNoCache: () => getJSDocReadonlyTagNoCache,
  getJSDocReturnTag: () => getJSDocReturnTag,
  getJSDocReturnType: () => getJSDocReturnType,
  getJSDocRoot: () => getJSDocRoot,
  getJSDocSatisfiesExpressionType: () => getJSDocSatisfiesExpressionType,
  getJSDocSatisfiesTag: () => getJSDocSatisfiesTag,
  getJSDocTags: () => getJSDocTags,
  getJSDocTemplateTag: () => getJSDocTemplateTag,
  getJSDocThisTag: () => getJSDocThisTag,
  getJSDocType: () => getJSDocType,
  getJSDocTypeAliasName: () => getJSDocTypeAliasName,
  getJSDocTypeAssertionType: () => getJSDocTypeAssertionType,
  getJSDocTypeParameterDeclarations: () => getJSDocTypeParameterDeclarations,
  getJSDocTypeParameterTags: () => getJSDocTypeParameterTags,
  getJSDocTypeParameterTagsNoCache: () => getJSDocTypeParameterTagsNoCache,
  getJSDocTypeTag: () => getJSDocTypeTag,
  getJSXImplicitImportBase: () => getJSXImplicitImportBase,
  getJSXRuntimeImport: () => getJSXRuntimeImport,
  getJSXTransformEnabled: () => getJSXTransformEnabled,
  getKeyForCompilerOptions: () => getKeyForCompilerOptions,
  getLanguageVariant: () => getLanguageVariant,
  getLastChild: () => getLastChild,
  getLeadingCommentRanges: () => getLeadingCommentRanges,
  getLeadingCommentRangesOfNode: () => getLeadingCommentRangesOfNode,
  getLeftmostAccessExpression: () => getLeftmostAccessExpression,
  getLeftmostExpression: () => getLeftmostExpression,
  getLibFileNameFromLibReference: () => getLibFileNameFromLibReference,
  getLibNameFromLibReference: () => getLibNameFromLibReference,
  getLibraryNameFromLibFileName: () => getLibraryNameFromLibFileName,
  getLineAndCharacterOfPosition: () => getLineAndCharacterOfPosition,
  getLineInfo: () => getLineInfo,
  getLineOfLocalPosition: () => getLineOfLocalPosition,
  getLineStartPositionForPosition: () => getLineStartPositionForPosition,
  getLineStarts: () => getLineStarts,
  getLinesBetweenPositionAndNextNonWhitespaceCharacter: () => getLinesBetweenPositionAndNextNonWhitespaceCharacter,
  getLinesBetweenPositionAndPrecedingNonWhitespaceCharacter: () => getLinesBetweenPositionAndPrecedingNonWhitespaceCharacter,
  getLinesBetweenPositions: () => getLinesBetweenPositions,
  getLinesBetweenRangeEndAndRangeStart: () => getLinesBetweenRangeEndAndRangeStart,
  getLinesBetweenRangeEndPositions: () => getLinesBetweenRangeEndPositions,
  getLiteralText: () => getLiteralText,
  getLocalNameForExternalImport: () => getLocalNameForExternalImport,
  getLocalSymbolForExportDefault: () => getLocalSymbolForExportDefault,
  getLocaleSpecificMessage: () => getLocaleSpecificMessage,
  getLocaleTimeString: () => getLocaleTimeString,
  getMappedContextSpan: () => getMappedContextSpan,
  getMappedDocumentSpan: () => getMappedDocumentSpan,
  getMappedLocation: () => getMappedLocation,
  getMatchedFileSpec: () => getMatchedFileSpec,
  getMatchedIncludeSpec: () => getMatchedIncludeSpec,
  getMeaningFromDeclaration: () => getMeaningFromDeclaration,
  getMeaningFromLocation: () => getMeaningFromLocation,
  getMembersOfDeclaration: () => getMembersOfDeclaration,
  getModeForFileReference: () => getModeForFileReference,
  getModeForResolutionAtIndex: () => getModeForResolutionAtIndex,
  getModeForUsageLocation: () => getModeForUsageLocation,
  getModifiedTime: () => getModifiedTime,
  getModifiers: () => getModifiers,
  getModuleInstanceState: () => getModuleInstanceState,
  getModuleNameStringLiteralAt: () => getModuleNameStringLiteralAt,
  getModuleSpecifierEndingPreference: () => getModuleSpecifierEndingPreference,
  getModuleSpecifierResolverHost: () => getModuleSpecifierResolverHost,
  getNameForExportedSymbol: () => getNameForExportedSymbol,
  getNameFromImportAttribute: () => getNameFromImportAttribute,
  getNameFromIndexInfo: () => getNameFromIndexInfo,
  getNameFromPropertyName: () => getNameFromPropertyName,
  getNameOfAccessExpression: () => getNameOfAccessExpression,
  getNameOfCompilerOptionValue: () => getNameOfCompilerOptionValue,
  getNameOfDeclaration: () => getNameOfDeclaration,
  getNameOfExpando: () => getNameOfExpando,
  getNameOfJSDocTypedef: () => getNameOfJSDocTypedef,
  getNameOfScriptTarget: () => getNameOfScriptTarget,
  getNameOrArgument: () => getNameOrArgument,
  getNameTable: () => getNameTable,
  getNamespaceDeclarationNode: () => getNamespaceDeclarationNode,
  getNewLineCharacter: () => getNewLineCharacter,
  getNewLineKind: () => getNewLineKind,
  getNewLineOrDefaultFromHost: () => getNewLineOrDefaultFromHost,
  getNewTargetContainer: () => getNewTargetContainer,
  getNextJSDocCommentLocation: () => getNextJSDocCommentLocation,
  getNodeChildren: () => getNodeChildren,
  getNodeForGeneratedName: () => getNodeForGeneratedName,
  getNodeId: () => getNodeId,
  getNodeKind: () => getNodeKind,
  getNodeModifiers: () => getNodeModifiers,
  getNodeModulePathParts: () => getNodeModulePathParts,
  getNonAssignedNameOfDeclaration: () => getNonAssignedNameOfDeclaration,
  getNonAssignmentOperatorForCompoundAssignment: () => getNonAssignmentOperatorForCompoundAssignment,
  getNonAugmentationDeclaration: () => getNonAugmentationDeclaration,
  getNonDecoratorTokenPosOfNode: () => getNonDecoratorTokenPosOfNode,
  getNonIncrementalBuildInfoRoots: () => getNonIncrementalBuildInfoRoots,
  getNonModifierTokenPosOfNode: () => getNonModifierTokenPosOfNode,
  getNormalizedAbsolutePath: () => getNormalizedAbsolutePath,
  getNormalizedAbsolutePathWithoutRoot: () => getNormalizedAbsolutePathWithoutRoot,
  getNormalizedPathComponents: () => getNormalizedPathComponents,
  getObjectFlags: () => getObjectFlags,
  getOperatorAssociativity: () => getOperatorAssociativity,
  getOperatorPrecedence: () => getOperatorPrecedence,
  getOptionFromName: () => getOptionFromName,
  getOptionsForLibraryResolution: () => getOptionsForLibraryResolution,
  getOptionsNameMap: () => getOptionsNameMap,
  getOptionsSyntaxByArrayElementValue: () => getOptionsSyntaxByArrayElementValue,
  getOptionsSyntaxByValue: () => getOptionsSyntaxByValue,
  getOrCreateEmitNode: () => getOrCreateEmitNode,
  getOrUpdate: () => getOrUpdate,
  getOriginalNode: () => getOriginalNode,
  getOriginalNodeId: () => getOriginalNodeId,
  getOutputDeclarationFileName: () => getOutputDeclarationFileName,
  getOutputDeclarationFileNameWorker: () => getOutputDeclarationFileNameWorker,
  getOutputExtension: () => getOutputExtension,
  getOutputFileNames: () => getOutputFileNames,
  getOutputJSFileNameWorker: () => getOutputJSFileNameWorker,
  getOutputPathsFor: () => getOutputPathsFor,
  getOwnEmitOutputFilePath: () => getOwnEmitOutputFilePath,
  getOwnKeys: () => getOwnKeys,
  getOwnValues: () => getOwnValues,
  getPackageJsonTypesVersionsPaths: () => getPackageJsonTypesVersionsPaths,
  getPackageNameFromTypesPackageName: () => getPackageNameFromTypesPackageName,
  getPackageScopeForPath: () => getPackageScopeForPath,
  getParameterSymbolFromJSDoc: () => getParameterSymbolFromJSDoc,
  getParentNodeInSpan: () => getParentNodeInSpan,
  getParseTreeNode: () => getParseTreeNode,
  getParsedCommandLineOfConfigFile: () => getParsedCommandLineOfConfigFile,
  getPathComponents: () => getPathComponents,
  getPathFromPathComponents: () => getPathFromPathComponents,
  getPathUpdater: () => getPathUpdater,
  getPathsBasePath: () => getPathsBasePath,
  getPatternFromSpec: () => getPatternFromSpec,
  getPendingEmitKindWithSeen: () => getPendingEmitKindWithSeen,
  getPositionOfLineAndCharacter: () => getPositionOfLineAndCharacter,
  getPossibleGenericSignatures: () => getPossibleGenericSignatures,
  getPossibleOriginalInputExtensionForExtension: () => getPossibleOriginalInputExtensionForExtension,
  getPossibleOriginalInputPathWithoutChangingExt: () => getPossibleOriginalInputPathWithoutChangingExt,
  getPossibleTypeArgumentsInfo: () => getPossibleTypeArgumentsInfo,
  getPreEmitDiagnostics: () => getPreEmitDiagnostics,
  getPrecedingNonSpaceCharacterPosition: () => getPrecedingNonSpaceCharacterPosition,
  getPrivateIdentifier: () => getPrivateIdentifier,
  getProperties: () => getProperties,
  getProperty: () => getProperty,
  getPropertyAssignmentAliasLikeExpression: () => getPropertyAssignmentAliasLikeExpression,
  getPropertyNameForPropertyNameNode: () => getPropertyNameForPropertyNameNode,
  getPropertyNameFromType: () => getPropertyNameFromType,
  getPropertyNameOfBindingOrAssignmentElement: () => getPropertyNameOfBindingOrAssignmentElement,
  getPropertySymbolFromBindingElement: () => getPropertySymbolFromBindingElement,
  getPropertySymbolsFromContextualType: () => getPropertySymbolsFromContextualType,
  getQuoteFromPreference: () => getQuoteFromPreference,
  getQuotePreference: () => getQuotePreference,
  getRangesWhere: () => getRangesWhere,
  getRefactorContextSpan: () => getRefactorContextSpan,
  getReferencedFileLocation: () => getReferencedFileLocation,
  getRegexFromPattern: () => getRegexFromPattern,
  getRegularExpressionForWildcard: () => getRegularExpressionForWildcard,
  getRegularExpressionsForWildcards: () => getRegularExpressionsForWildcards,
  getRelativePathFromDirectory: () => getRelativePathFromDirectory,
  getRelativePathFromFile: () => getRelativePathFromFile,
  getRelativePathToDirectoryOrUrl: () => getRelativePathToDirectoryOrUrl,
  getRenameLocation: () => getRenameLocation,
  getReplacementSpanForContextToken: () => getReplacementSpanForContextToken,
  getResolutionDiagnostic: () => getResolutionDiagnostic,
  getResolutionModeOverride: () => getResolutionModeOverride,
  getResolveJsonModule: () => getResolveJsonModule,
  getResolvePackageJsonExports: () => getResolvePackageJsonExports,
  getResolvePackageJsonImports: () => getResolvePackageJsonImports,
  getResolvedExternalModuleName: () => getResolvedExternalModuleName,
  getResolvedModuleFromResolution: () => getResolvedModuleFromResolution,
  getResolvedTypeReferenceDirectiveFromResolution: () => getResolvedTypeReferenceDirectiveFromResolution,
  getRestIndicatorOfBindingOrAssignmentElement: () => getRestIndicatorOfBindingOrAssignmentElement,
  getRestParameterElementType: () => getRestParameterElementType,
  getRightMostAssignedExpression: () => getRightMostAssignedExpression,
  getRootDeclaration: () => getRootDeclaration,
  getRootDirectoryOfResolutionCache: () => getRootDirectoryOfResolutionCache,
  getRootLength: () => getRootLength,
  getScriptKind: () => getScriptKind,
  getScriptKindFromFileName: () => getScriptKindFromFileName,
  getScriptTargetFeatures: () => getScriptTargetFeatures,
  getSelectedEffectiveModifierFlags: () => getSelectedEffectiveModifierFlags,
  getSelectedSyntacticModifierFlags: () => getSelectedSyntacticModifierFlags,
  getSemanticClassifications: () => getSemanticClassifications,
  getSemanticJsxChildren: () => getSemanticJsxChildren,
  getSetAccessorTypeAnnotationNode: () => getSetAccessorTypeAnnotationNode,
  getSetAccessorValueParameter: () => getSetAccessorValueParameter,
  getSetExternalModuleIndicator: () => getSetExternalModuleIndicator,
  getShebang: () => getShebang,
  getSingleVariableOfVariableStatement: () => getSingleVariableOfVariableStatement,
  getSnapshotText: () => getSnapshotText,
  getSnippetElement: () => getSnippetElement,
  getSourceFileOfModule: () => getSourceFileOfModule,
  getSourceFileOfNode: () => getSourceFileOfNode,
  getSourceFilePathInNewDir: () => getSourceFilePathInNewDir,
  getSourceFileVersionAsHashFromText: () => getSourceFileVersionAsHashFromText,
  getSourceFilesToEmit: () => getSourceFilesToEmit,
  getSourceMapRange: () => getSourceMapRange,
  getSourceMapper: () => getSourceMapper,
  getSourceTextOfNodeFromSourceFile: () => getSourceTextOfNodeFromSourceFile,
  getSpanOfTokenAtPosition: () => getSpanOfTokenAtPosition,
  getSpellingSuggestion: () => getSpellingSuggestion,
  getStartPositionOfLine: () => getStartPositionOfLine,
  getStartPositionOfRange: () => getStartPositionOfRange,
  getStartsOnNewLine: () => getStartsOnNewLine,
  getStaticPropertiesAndClassStaticBlock: () => getStaticPropertiesAndClassStaticBlock,
  getStrictOptionValue: () => getStrictOptionValue,
  getStringComparer: () => getStringComparer,
  getSubPatternFromSpec: () => getSubPatternFromSpec,
  getSuperCallFromStatement: () => getSuperCallFromStatement,
  getSuperContainer: () => getSuperContainer,
  getSupportedCodeFixes: () => getSupportedCodeFixes,
  getSupportedExtensions: () => getSupportedExtensions,
  getSupportedExtensionsWithJsonIfResolveJsonModule: () => getSupportedExtensionsWithJsonIfResolveJsonModule,
  getSwitchedType: () => getSwitchedType,
  getSymbolId: () => getSymbolId,
  getSymbolNameForPrivateIdentifier: () => getSymbolNameForPrivateIdentifier,
  getSymbolTarget: () => getSymbolTarget,
  getSyntacticClassifications: () => getSyntacticClassifications,
  getSyntacticModifierFlags: () => getSyntacticModifierFlags,
  getSyntacticModifierFlagsNoCache: () => getSyntacticModifierFlagsNoCache,
  getSynthesizedDeepClone: () => getSynthesizedDeepClone,
  getSynthesizedDeepCloneWithReplacements: () => getSynthesizedDeepCloneWithReplacements,
  getSynthesizedDeepClones: () => getSynthesizedDeepClones,
  getSynthesizedDeepClonesWithReplacements: () => getSynthesizedDeepClonesWithReplacements,
  getSyntheticLeadingComments: () => getSyntheticLeadingComments,
  getSyntheticTrailingComments: () => getSyntheticTrailingComments,
  getTargetLabel: () => getTargetLabel,
  getTargetOfBindingOrAssignmentElement: () => getTargetOfBindingOrAssignmentElement,
  getTemporaryModuleResolutionState: () => getTemporaryModuleResolutionState,
  getTextOfConstantValue: () => getTextOfConstantValue,
  getTextOfIdentifierOrLiteral: () => getTextOfIdentifierOrLiteral,
  getTextOfJSDocComment: () => getTextOfJSDocComment,
  getTextOfJsxAttributeName: () => getTextOfJsxAttributeName,
  getTextOfJsxNamespacedName: () => getTextOfJsxNamespacedName,
  getTextOfNode: () => getTextOfNode,
  getTextOfNodeFromSourceText: () => getTextOfNodeFromSourceText,
  getTextOfPropertyName: () => getTextOfPropertyName,
  getThisContainer: () => getThisContainer,
  getThisParameter: () => getThisParameter,
  getTokenAtPosition: () => getTokenAtPosition,
  getTokenPosOfNode: () => getTokenPosOfNode,
  getTokenSourceMapRange: () => getTokenSourceMapRange,
  getTouchingPropertyName: () => getTouchingPropertyName,
  getTouchingToken: () => getTouchingToken,
  getTrailingCommentRanges: () => getTrailingCommentRanges,
  getTrailingSemicolonDeferringWriter: () => getTrailingSemicolonDeferringWriter,
  getTransformers: () => getTransformers,
  getTsBuildInfoEmitOutputFilePath: () => getTsBuildInfoEmitOutputFilePath,
  getTsConfigObjectLiteralExpression: () => getTsConfigObjectLiteralExpression,
  getTsConfigPropArrayElementValue: () => getTsConfigPropArrayElementValue,
  getTypeAnnotationNode: () => getTypeAnnotationNode,
  getTypeArgumentOrTypeParameterList: () => getTypeArgumentOrTypeParameterList,
  getTypeKeywordOfTypeOnlyImport: () => getTypeKeywordOfTypeOnlyImport,
  getTypeNode: () => getTypeNode,
  getTypeNodeIfAccessible: () => getTypeNodeIfAccessible,
  getTypeParameterFromJsDoc: () => getTypeParameterFromJsDoc,
  getTypeParameterOwner: () => getTypeParameterOwner,
  getTypesPackageName: () => getTypesPackageName,
  getUILocale: () => getUILocale,
  getUniqueName: () => getUniqueName,
  getUniqueSymbolId: () => getUniqueSymbolId,
  getUseDefineForClassFields: () => getUseDefineForClassFields,
  getWatchErrorSummaryDiagnosticMessage: () => getWatchErrorSummaryDiagnosticMessage,
  getWatchFactory: () => getWatchFactory,
  group: () => group,
  groupBy: () => groupBy,
  guessIndentation: () => guessIndentation,
  handleNoEmitOptions: () => handleNoEmitOptions,
  handleWatchOptionsConfigDirTemplateSubstitution: () => handleWatchOptionsConfigDirTemplateSubstitution,
  hasAbstractModifier: () => hasAbstractModifier,
  hasAccessorModifier: () => hasAccessorModifier,
  hasAmbientModifier: () => hasAmbientModifier,
  hasChangesInResolutions: () => hasChangesInResolutions,
  hasContextSensitiveParameters: () => hasContextSensitiveParameters,
  hasDecorators: () => hasDecorators,
  hasDocComment: () => hasDocComment,
  hasDynamicName: () => hasDynamicName,
  hasEffectiveModifier: () => hasEffectiveModifier,
  hasEffectiveModifiers: () => hasEffectiveModifiers,
  hasEffectiveReadonlyModifier: () => hasEffectiveReadonlyModifier,
  hasExtension: () => hasExtension,
  hasImplementationTSFileExtension: () => hasImplementationTSFileExtension,
  hasIndexSignature: () => hasIndexSignature,
  hasInferredType: () => hasInferredType,
  hasInitializer: () => hasInitializer,
  hasInvalidEscape: () => hasInvalidEscape,
  hasJSDocNodes: () => hasJSDocNodes,
  hasJSDocParameterTags: () => hasJSDocParameterTags,
  hasJSFileExtension: () => hasJSFileExtension,
  hasJsonModuleEmitEnabled: () => hasJsonModuleEmitEnabled,
  hasOnlyExpressionInitializer: () => hasOnlyExpressionInitializer,
  hasOverrideModifier: () => hasOverrideModifier,
  hasPossibleExternalModuleReference: () => hasPossibleExternalModuleReference,
  hasProperty: () => hasProperty,
  hasPropertyAccessExpressionWithName: () => hasPropertyAccessExpressionWithName,
  hasQuestionToken: () => hasQuestionToken,
  hasRecordedExternalHelpers: () => hasRecordedExternalHelpers,
  hasResolutionModeOverride: () => hasResolutionModeOverride,
  hasRestParameter: () => hasRestParameter,
  hasScopeMarker: () => hasScopeMarker,
  hasStaticModifier: () => hasStaticModifier,
  hasSyntacticModifier: () => hasSyntacticModifier,
  hasSyntacticModifiers: () => hasSyntacticModifiers,
  hasTSFileExtension: () => hasTSFileExtension,
  hasTabstop: () => hasTabstop,
  hasTrailingDirectorySeparator: () => hasTrailingDirectorySeparator,
  hasType: () => hasType,
  hasTypeArguments: () => hasTypeArguments,
  hasZeroOrOneAsteriskCharacter: () => hasZeroOrOneAsteriskCharacter,
  hostGetCanonicalFileName: () => hostGetCanonicalFileName,
  hostUsesCaseSensitiveFileNames: () => hostUsesCaseSensitiveFileNames,
  idText: () => idText,
  identifierIsThisKeyword: () => identifierIsThisKeyword,
  identifierToKeywordKind: () => identifierToKeywordKind,
  identity: () => identity,
  identitySourceMapConsumer: () => identitySourceMapConsumer,
  ignoreSourceNewlines: () => ignoreSourceNewlines,
  ignoredPaths: () => ignoredPaths,
  importFromModuleSpecifier: () => importFromModuleSpecifier,
  importSyntaxAffectsModuleResolution: () => importSyntaxAffectsModuleResolution,
  indexOfAnyCharCode: () => indexOfAnyCharCode,
  indexOfNode: () => indexOfNode,
  indicesOf: () => indicesOf,
  inferredTypesContainingFile: () => inferredTypesContainingFile,
  injectClassNamedEvaluationHelperBlockIfMissing: () => injectClassNamedEvaluationHelperBlockIfMissing,
  injectClassThisAssignmentIfMissing: () => injectClassThisAssignmentIfMissing,
  insertImports: () => insertImports,
  insertSorted: () => insertSorted,
  insertStatementAfterCustomPrologue: () => insertStatementAfterCustomPrologue,
  insertStatementAfterStandardPrologue: () => insertStatementAfterStandardPrologue,
  insertStatementsAfterCustomPrologue: () => insertStatementsAfterCustomPrologue,
  insertStatementsAfterStandardPrologue: () => insertStatementsAfterStandardPrologue,
  intersperse: () => intersperse,
  intrinsicTagNameToString: () => intrinsicTagNameToString,
  introducesArgumentsExoticObject: () => introducesArgumentsExoticObject,
  inverseJsxOptionMap: () => inverseJsxOptionMap,
  isAbstractConstructorSymbol: () => isAbstractConstructorSymbol,
  isAbstractModifier: () => isAbstractModifier,
  isAccessExpression: () => isAccessExpression,
  isAccessibilityModifier: () => isAccessibilityModifier,
  isAccessor: () => isAccessor,
  isAccessorModifier: () => isAccessorModifier,
  isAliasableExpression: () => isAliasableExpression,
  isAmbientModule: () => isAmbientModule,
  isAmbientPropertyDeclaration: () => isAmbientPropertyDeclaration,
  isAnyDirectorySeparator: () => isAnyDirectorySeparator,
  isAnyImportOrBareOrAccessedRequire: () => isAnyImportOrBareOrAccessedRequire,
  isAnyImportOrReExport: () => isAnyImportOrReExport,
  isAnyImportOrRequireStatement: () => isAnyImportOrRequireStatement,
  isAnyImportSyntax: () => isAnyImportSyntax,
  isAnySupportedFileExtension: () => isAnySupportedFileExtension,
  isApplicableVersionedTypesKey: () => isApplicableVersionedTypesKey,
  isArgumentExpressionOfElementAccess: () => isArgumentExpressionOfElementAccess,
  isArray: () => isArray,
  isArrayBindingElement: () => isArrayBindingElement,
  isArrayBindingOrAssignmentElement: () => isArrayBindingOrAssignmentElement,
  isArrayBindingOrAssignmentPattern: () => isArrayBindingOrAssignmentPattern,
  isArrayBindingPattern: () => isArrayBindingPattern,
  isArrayLiteralExpression: () => isArrayLiteralExpression,
  isArrayLiteralOrObjectLiteralDestructuringPattern: () => isArrayLiteralOrObjectLiteralDestructuringPattern,
  isArrayTypeNode: () => isArrayTypeNode,
  isArrowFunction: () => isArrowFunction,
  isAsExpression: () => isAsExpression,
  isAssertClause: () => isAssertClause,
  isAssertEntry: () => isAssertEntry,
  isAssertionExpression: () => isAssertionExpression,
  isAssertsKeyword: () => isAssertsKeyword,
  isAssignmentDeclaration: () => isAssignmentDeclaration,
  isAssignmentExpression: () => isAssignmentExpression,
  isAssignmentOperator: () => isAssignmentOperator,
  isAssignmentPattern: () => isAssignmentPattern,
  isAssignmentTarget: () => isAssignmentTarget,
  isAsteriskToken: () => isAsteriskToken,
  isAsyncFunction: () => isAsyncFunction,
  isAsyncModifier: () => isAsyncModifier,
  isAutoAccessorPropertyDeclaration: () => isAutoAccessorPropertyDeclaration,
  isAwaitExpression: () => isAwaitExpression,
  isAwaitKeyword: () => isAwaitKeyword,
  isBigIntLiteral: () => isBigIntLiteral,
  isBinaryExpression: () => isBinaryExpression,
  isBinaryLogicalOperator: () => isBinaryLogicalOperator,
  isBinaryOperatorToken: () => isBinaryOperatorToken,
  isBindableObjectDefinePropertyCall: () => isBindableObjectDefinePropertyCall,
  isBindableStaticAccessExpression: () => isBindableStaticAccessExpression,
  isBindableStaticElementAccessExpression: () => isBindableStaticElementAccessExpression,
  isBindableStaticNameExpression: () => isBindableStaticNameExpression,
  isBindingElement: () => isBindingElement,
  isBindingElementOfBareOrAccessedRequire: () => isBindingElementOfBareOrAccessedRequire,
  isBindingName: () => isBindingName,
  isBindingOrAssignmentElement: () => isBindingOrAssignmentElement,
  isBindingOrAssignmentPattern: () => isBindingOrAssignmentPattern,
  isBindingPattern: () => isBindingPattern,
  isBlock: () => isBlock,
  isBlockLike: () => isBlockLike,
  isBlockOrCatchScoped: () => isBlockOrCatchScoped,
  isBlockScope: () => isBlockScope,
  isBlockScopedContainerTopLevel: () => isBlockScopedContainerTopLevel,
  isBooleanLiteral: () => isBooleanLiteral,
  isBreakOrContinueStatement: () => isBreakOrContinueStatement,
  isBreakStatement: () => isBreakStatement,
  isBuildCommand: () => isBuildCommand,
  isBuildInfoFile: () => isBuildInfoFile,
  isBuilderProgram: () => isBuilderProgram,
  isBundle: () => isBundle,
  isCallChain: () => isCallChain,
  isCallExpression: () => isCallExpression,
  isCallExpressionTarget: () => isCallExpressionTarget,
  isCallLikeExpression: () => isCallLikeExpression,
  isCallLikeOrFunctionLikeExpression: () => isCallLikeOrFunctionLikeExpression,
  isCallOrNewExpression: () => isCallOrNewExpression,
  isCallOrNewExpressionTarget: () => isCallOrNewExpressionTarget,
  isCallSignatureDeclaration: () => isCallSignatureDeclaration,
  isCallToHelper: () => isCallToHelper,
  isCaseBlock: () => isCaseBlock,
  isCaseClause: () => isCaseClause,
  isCaseKeyword: () => isCaseKeyword,
  isCaseOrDefaultClause: () => isCaseOrDefaultClause,
  isCatchClause: () => isCatchClause,
  isCatchClauseVariableDeclaration: () => isCatchClauseVariableDeclaration,
  isCatchClauseVariableDeclarationOrBindingElement: () => isCatchClauseVariableDeclarationOrBindingElement,
  isCheckJsEnabledForFile: () => isCheckJsEnabledForFile,
  isCircularBuildOrder: () => isCircularBuildOrder,
  isClassDeclaration: () => isClassDeclaration,
  isClassElement: () => isClassElement,
  isClassExpression: () => isClassExpression,
  isClassInstanceProperty: () => isClassInstanceProperty,
  isClassLike: () => isClassLike,
  isClassMemberModifier: () => isClassMemberModifier,
  isClassNamedEvaluationHelperBlock: () => isClassNamedEvaluationHelperBlock,
  isClassOrTypeElement: () => isClassOrTypeElement,
  isClassStaticBlockDeclaration: () => isClassStaticBlockDeclaration,
  isClassThisAssignmentBlock: () => isClassThisAssignmentBlock,
  isColonToken: () => isColonToken,
  isCommaExpression: () => isCommaExpression,
  isCommaListExpression: () => isCommaListExpression,
  isCommaSequence: () => isCommaSequence,
  isCommaToken: () => isCommaToken,
  isComment: () => isComment,
  isCommonJsExportPropertyAssignment: () => isCommonJsExportPropertyAssignment,
  isCommonJsExportedExpression: () => isCommonJsExportedExpression,
  isCompoundAssignment: () => isCompoundAssignment,
  isComputedNonLiteralName: () => isComputedNonLiteralName,
  isComputedPropertyName: () => isComputedPropertyName,
  isConciseBody: () => isConciseBody,
  isConditionalExpression: () => isConditionalExpression,
  isConditionalTypeNode: () => isConditionalTypeNode,
  isConstAssertion: () => isConstAssertion,
  isConstTypeReference: () => isConstTypeReference,
  isConstructSignatureDeclaration: () => isConstructSignatureDeclaration,
  isConstructorDeclaration: () => isConstructorDeclaration,
  isConstructorTypeNode: () => isConstructorTypeNode,
  isContextualKeyword: () => isContextualKeyword,
  isContinueStatement: () => isContinueStatement,
  isCustomPrologue: () => isCustomPrologue,
  isDebuggerStatement: () => isDebuggerStatement,
  isDeclaration: () => isDeclaration,
  isDeclarationBindingElement: () => isDeclarationBindingElement,
  isDeclarationFileName: () => isDeclarationFileName,
  isDeclarationName: () => isDeclarationName,
  isDeclarationNameOfEnumOrNamespace: () => isDeclarationNameOfEnumOrNamespace,
  isDeclarationReadonly: () => isDeclarationReadonly,
  isDeclarationStatement: () => isDeclarationStatement,
  isDeclarationWithTypeParameterChildren: () => isDeclarationWithTypeParameterChildren,
  isDeclarationWithTypeParameters: () => isDeclarationWithTypeParameters,
  isDecorator: () => isDecorator,
  isDecoratorTarget: () => isDecoratorTarget,
  isDefaultClause: () => isDefaultClause,
  isDefaultImport: () => isDefaultImport,
  isDefaultModifier: () => isDefaultModifier,
  isDefaultedExpandoInitializer: () => isDefaultedExpandoInitializer,
  isDeleteExpression: () => isDeleteExpression,
  isDeleteTarget: () => isDeleteTarget,
  isDeprecatedDeclaration: () => isDeprecatedDeclaration,
  isDestructuringAssignment: () => isDestructuringAssignment,
  isDiskPathRoot: () => isDiskPathRoot,
  isDoStatement: () => isDoStatement,
  isDocumentRegistryEntry: () => isDocumentRegistryEntry,
  isDotDotDotToken: () => isDotDotDotToken,
  isDottedName: () => isDottedName,
  isDynamicName: () => isDynamicName,
  isEffectiveExternalModule: () => isEffectiveExternalModule,
  isEffectiveStrictModeSourceFile: () => isEffectiveStrictModeSourceFile,
  isElementAccessChain: () => isElementAccessChain,
  isElementAccessExpression: () => isElementAccessExpression,
  isEmittedFileOfProgram: () => isEmittedFileOfProgram,
  isEmptyArrayLiteral: () => isEmptyArrayLiteral,
  isEmptyBindingElement: () => isEmptyBindingElement,
  isEmptyBindingPattern: () => isEmptyBindingPattern,
  isEmptyObjectLiteral: () => isEmptyObjectLiteral,
  isEmptyStatement: () => isEmptyStatement,
  isEmptyStringLiteral: () => isEmptyStringLiteral,
  isEntityName: () => isEntityName,
  isEntityNameExpression: () => isEntityNameExpression,
  isEnumConst: () => isEnumConst,
  isEnumDeclaration: () => isEnumDeclaration,
  isEnumMember: () => isEnumMember,
  isEqualityOperatorKind: () => isEqualityOperatorKind,
  isEqualsGreaterThanToken: () => isEqualsGreaterThanToken,
  isExclamationToken: () => isExclamationToken,
  isExcludedFile: () => isExcludedFile,
  isExclusivelyTypeOnlyImportOrExport: () => isExclusivelyTypeOnlyImportOrExport,
  isExpandoPropertyDeclaration: () => isExpandoPropertyDeclaration,
  isExportAssignment: () => isExportAssignment,
  isExportDeclaration: () => isExportDeclaration,
  isExportModifier: () => isExportModifier,
  isExportName: () => isExportName,
  isExportNamespaceAsDefaultDeclaration: () => isExportNamespaceAsDefaultDeclaration,
  isExportOrDefaultModifier: () => isExportOrDefaultModifier,
  isExportSpecifier: () => isExportSpecifier,
  isExportsIdentifier: () => isExportsIdentifier,
  isExportsOrModuleExportsOrAlias: () => isExportsOrModuleExportsOrAlias,
  isExpression: () => isExpression,
  isExpressionNode: () => isExpressionNode,
  isExpressionOfExternalModuleImportEqualsDeclaration: () => isExpressionOfExternalModuleImportEqualsDeclaration,
  isExpressionOfOptionalChainRoot: () => isExpressionOfOptionalChainRoot,
  isExpressionStatement: () => isExpressionStatement,
  isExpressionWithTypeArguments: () => isExpressionWithTypeArguments,
  isExpressionWithTypeArgumentsInClassExtendsClause: () => isExpressionWithTypeArgumentsInClassExtendsClause,
  isExternalModule: () => isExternalModule,
  isExternalModuleAugmentation: () => isExternalModuleAugmentation,
  isExternalModuleImportEqualsDeclaration: () => isExternalModuleImportEqualsDeclaration,
  isExternalModuleIndicator: () => isExternalModuleIndicator,
  isExternalModuleNameRelative: () => isExternalModuleNameRelative,
  isExternalModuleReference: () => isExternalModuleReference,
  isExternalModuleSymbol: () => isExternalModuleSymbol,
  isExternalOrCommonJsModule: () => isExternalOrCommonJsModule,
  isFileLevelReservedGeneratedIdentifier: () => isFileLevelReservedGeneratedIdentifier,
  isFileLevelUniqueName: () => isFileLevelUniqueName,
  isFileProbablyExternalModule: () => isFileProbablyExternalModule,
  isFirstDeclarationOfSymbolParameter: () => isFirstDeclarationOfSymbolParameter,
  isFixablePromiseHandler: () => isFixablePromiseHandler,
  isForInOrOfStatement: () => isForInOrOfStatement,
  isForInStatement: () => isForInStatement,
  isForInitializer: () => isForInitializer,
  isForOfStatement: () => isForOfStatement,
  isForStatement: () => isForStatement,
  isFullSourceFile: () => isFullSourceFile,
  isFunctionBlock: () => isFunctionBlock,
  isFunctionBody: () => isFunctionBody,
  isFunctionDeclaration: () => isFunctionDeclaration,
  isFunctionExpression: () => isFunctionExpression,
  isFunctionExpressionOrArrowFunction: () => isFunctionExpressionOrArrowFunction,
  isFunctionLike: () => isFunctionLike,
  isFunctionLikeDeclaration: () => isFunctionLikeDeclaration,
  isFunctionLikeKind: () => isFunctionLikeKind,
  isFunctionLikeOrClassStaticBlockDeclaration: () => isFunctionLikeOrClassStaticBlockDeclaration,
  isFunctionOrConstructorTypeNode: () => isFunctionOrConstructorTypeNode,
  isFunctionOrModuleBlock: () => isFunctionOrModuleBlock,
  isFunctionSymbol: () => isFunctionSymbol,
  isFunctionTypeNode: () => isFunctionTypeNode,
  isGeneratedIdentifier: () => isGeneratedIdentifier,
  isGeneratedPrivateIdentifier: () => isGeneratedPrivateIdentifier,
  isGetAccessor: () => isGetAccessor,
  isGetAccessorDeclaration: () => isGetAccessorDeclaration,
  isGetOrSetAccessorDeclaration: () => isGetOrSetAccessorDeclaration,
  isGlobalScopeAugmentation: () => isGlobalScopeAugmentation,
  isGlobalSourceFile: () => isGlobalSourceFile,
  isGrammarError: () => isGrammarError,
  isHeritageClause: () => isHeritageClause,
  isHoistedFunction: () => isHoistedFunction,
  isHoistedVariableStatement: () => isHoistedVariableStatement,
  isIdentifier: () => isIdentifier,
  isIdentifierANonContextualKeyword: () => isIdentifierANonContextualKeyword,
  isIdentifierName: () => isIdentifierName,
  isIdentifierOrThisTypeNode: () => isIdentifierOrThisTypeNode,
  isIdentifierPart: () => isIdentifierPart,
  isIdentifierStart: () => isIdentifierStart,
  isIdentifierText: () => isIdentifierText,
  isIdentifierTypePredicate: () => isIdentifierTypePredicate,
  isIdentifierTypeReference: () => isIdentifierTypeReference,
  isIfStatement: () => isIfStatement,
  isIgnoredFileFromWildCardWatching: () => isIgnoredFileFromWildCardWatching,
  isImplicitGlob: () => isImplicitGlob,
  isImportAttribute: () => isImportAttribute,
  isImportAttributeName: () => isImportAttributeName,
  isImportAttributes: () => isImportAttributes,
  isImportCall: () => isImportCall,
  isImportClause: () => isImportClause,
  isImportDeclaration: () => isImportDeclaration,
  isImportEqualsDeclaration: () => isImportEqualsDeclaration,
  isImportKeyword: () => isImportKeyword,
  isImportMeta: () => isImportMeta,
  isImportOrExportSpecifier: () => isImportOrExportSpecifier,
  isImportOrExportSpecifierName: () => isImportOrExportSpecifierName,
  isImportSpecifier: () => isImportSpecifier,
  isImportTypeAssertionContainer: () => isImportTypeAssertionContainer,
  isImportTypeNode: () => isImportTypeNode,
  isImportable: () => isImportable,
  isInComment: () => isInComment,
  isInCompoundLikeAssignment: () => isInCompoundLikeAssignment,
  isInExpressionContext: () => isInExpressionContext,
  isInJSDoc: () => isInJSDoc,
  isInJSFile: () => isInJSFile,
  isInJSXText: () => isInJSXText,
  isInJsonFile: () => isInJsonFile,
  isInNonReferenceComment: () => isInNonReferenceComment,
  isInReferenceComment: () => isInReferenceComment,
  isInRightSideOfInternalImportEqualsDeclaration: () => isInRightSideOfInternalImportEqualsDeclaration,
  isInString: () => isInString,
  isInTemplateString: () => isInTemplateString,
  isInTopLevelContext: () => isInTopLevelContext,
  isInTypeQuery: () => isInTypeQuery,
  isIncrementalBuildInfo: () => isIncrementalBuildInfo,
  isIncrementalBundleEmitBuildInfo: () => isIncrementalBundleEmitBuildInfo,
  isIncrementalCompilation: () => isIncrementalCompilation,
  isIndexSignatureDeclaration: () => isIndexSignatureDeclaration,
  isIndexedAccessTypeNode: () => isIndexedAccessTypeNode,
  isInferTypeNode: () => isInferTypeNode,
  isInfinityOrNaNString: () => isInfinityOrNaNString,
  isInitializedProperty: () => isInitializedProperty,
  isInitializedVariable: () => isInitializedVariable,
  isInsideJsxElement: () => isInsideJsxElement,
  isInsideJsxElementOrAttribute: () => isInsideJsxElementOrAttribute,
  isInsideNodeModules: () => isInsideNodeModules,
  isInsideTemplateLiteral: () => isInsideTemplateLiteral,
  isInstanceOfExpression: () => isInstanceOfExpression,
  isInstantiatedModule: () => isInstantiatedModule,
  isInterfaceDeclaration: () => isInterfaceDeclaration,
  isInternalDeclaration: () => isInternalDeclaration,
  isInternalModuleImportEqualsDeclaration: () => isInternalModuleImportEqualsDeclaration,
  isInternalName: () => isInternalName,
  isIntersectionTypeNode: () => isIntersectionTypeNode,
  isIntrinsicJsxName: () => isIntrinsicJsxName,
  isIterationStatement: () => isIterationStatement,
  isJSDoc: () => isJSDoc,
  isJSDocAllType: () => isJSDocAllType,
  isJSDocAugmentsTag: () => isJSDocAugmentsTag,
  isJSDocAuthorTag: () => isJSDocAuthorTag,
  isJSDocCallbackTag: () => isJSDocCallbackTag,
  isJSDocClassTag: () => isJSDocClassTag,
  isJSDocCommentContainingNode: () => isJSDocCommentContainingNode,
  isJSDocConstructSignature: () => isJSDocConstructSignature,
  isJSDocDeprecatedTag: () => isJSDocDeprecatedTag,
  isJSDocEnumTag: () => isJSDocEnumTag,
  isJSDocFunctionType: () => isJSDocFunctionType,
  isJSDocImplementsTag: () => isJSDocImplementsTag,
  isJSDocImportTag: () => isJSDocImportTag,
  isJSDocIndexSignature: () => isJSDocIndexSignature,
  isJSDocLikeText: () => isJSDocLikeText,
  isJSDocLink: () => isJSDocLink,
  isJSDocLinkCode: () => isJSDocLinkCode,
  isJSDocLinkLike: () => isJSDocLinkLike,
  isJSDocLinkPlain: () => isJSDocLinkPlain,
  isJSDocMemberName: () => isJSDocMemberName,
  isJSDocNameReference: () => isJSDocNameReference,
  isJSDocNamepathType: () => isJSDocNamepathType,
  isJSDocNamespaceBody: () => isJSDocNamespaceBody,
  isJSDocNode: () => isJSDocNode,
  isJSDocNonNullableType: () => isJSDocNonNullableType,
  isJSDocNullableType: () => isJSDocNullableType,
  isJSDocOptionalParameter: () => isJSDocOptionalParameter,
  isJSDocOptionalType: () => isJSDocOptionalType,
  isJSDocOverloadTag: () => isJSDocOverloadTag,
  isJSDocOverrideTag: () => isJSDocOverrideTag,
  isJSDocParameterTag: () => isJSDocParameterTag,
  isJSDocPrivateTag: () => isJSDocPrivateTag,
  isJSDocPropertyLikeTag: () => isJSDocPropertyLikeTag,
  isJSDocPropertyTag: () => isJSDocPropertyTag,
  isJSDocProtectedTag: () => isJSDocProtectedTag,
  isJSDocPublicTag: () => isJSDocPublicTag,
  isJSDocReadonlyTag: () => isJSDocReadonlyTag,
  isJSDocReturnTag: () => isJSDocReturnTag,
  isJSDocSatisfiesExpression: () => isJSDocSatisfiesExpression,
  isJSDocSatisfiesTag: () => isJSDocSatisfiesTag,
  isJSDocSeeTag: () => isJSDocSeeTag,
  isJSDocSignature: () => isJSDocSignature,
  isJSDocTag: () => isJSDocTag,
  isJSDocTemplateTag: () => isJSDocTemplateTag,
  isJSDocThisTag: () => isJSDocThisTag,
  isJSDocThrowsTag: () => isJSDocThrowsTag,
  isJSDocTypeAlias: () => isJSDocTypeAlias,
  isJSDocTypeAssertion: () => isJSDocTypeAssertion,
  isJSDocTypeExpression: () => isJSDocTypeExpression,
  isJSDocTypeLiteral: () => isJSDocTypeLiteral,
  isJSDocTypeTag: () => isJSDocTypeTag,
  isJSDocTypedefTag: () => isJSDocTypedefTag,
  isJSDocUnknownTag: () => isJSDocUnknownTag,
  isJSDocUnknownType: () => isJSDocUnknownType,
  isJSDocVariadicType: () => isJSDocVariadicType,
  isJSXTagName: () => isJSXTagName,
  isJsonEqual: () => isJsonEqual,
  isJsonSourceFile: () => isJsonSourceFile,
  isJsxAttribute: () => isJsxAttribute,
  isJsxAttributeLike: () => isJsxAttributeLike,
  isJsxAttributeName: () => isJsxAttributeName,
  isJsxAttributes: () => isJsxAttributes,
  isJsxCallLike: () => isJsxCallLike,
  isJsxChild: () => isJsxChild,
  isJsxClosingElement: () => isJsxClosingElement,
  isJsxClosingFragment: () => isJsxClosingFragment,
  isJsxElement: () => isJsxElement,
  isJsxExpression: () => isJsxExpression,
  isJsxFragment: () => isJsxFragment,
  isJsxNamespacedName: () => isJsxNamespacedName,
  isJsxOpeningElement: () => isJsxOpeningElement,
  isJsxOpeningFragment: () => isJsxOpeningFragment,
  isJsxOpeningLikeElement: () => isJsxOpeningLikeElement,
  isJsxOpeningLikeElementTagName: () => isJsxOpeningLikeElementTagName,
  isJsxSelfClosingElement: () => isJsxSelfClosingElement,
  isJsxSpreadAttribute: () => isJsxSpreadAttribute,
  isJsxTagNameExpression: () => isJsxTagNameExpression,
  isJsxText: () => isJsxText,
  isJumpStatementTarget: () => isJumpStatementTarget,
  isKeyword: () => isKeyword,
  isKeywordOrPunctuation: () => isKeywordOrPunctuation,
  isKnownSymbol: () => isKnownSymbol,
  isLabelName: () => isLabelName,
  isLabelOfLabeledStatement: () => isLabelOfLabeledStatement,
  isLabeledStatement: () => isLabeledStatement,
  isLateVisibilityPaintedStatement: () => isLateVisibilityPaintedStatement,
  isLeftHandSideExpression: () => isLeftHandSideExpression,
  isLet: () => isLet,
  isLineBreak: () => isLineBreak,
  isLiteralComputedPropertyDeclarationName: () => isLiteralComputedPropertyDeclarationName,
  isLiteralExpression: () => isLiteralExpression,
  isLiteralExpressionOfObject: () => isLiteralExpressionOfObject,
  isLiteralImportTypeNode: () => isLiteralImportTypeNode,
  isLiteralKind: () => isLiteralKind,
  isLiteralNameOfPropertyDeclarationOrIndexAccess: () => isLiteralNameOfPropertyDeclarationOrIndexAccess,
  isLiteralTypeLiteral: () => isLiteralTypeLiteral,
  isLiteralTypeNode: () => isLiteralTypeNode,
  isLocalName: () => isLocalName,
  isLogicalOperator: () => isLogicalOperator,
  isLogicalOrCoalescingAssignmentExpression: () => isLogicalOrCoalescingAssignmentExpression,
  isLogicalOrCoalescingAssignmentOperator: () => isLogicalOrCoalescingAssignmentOperator,
  isLogicalOrCoalescingBinaryExpression: () => isLogicalOrCoalescingBinaryExpression,
  isLogicalOrCoalescingBinaryOperator: () => isLogicalOrCoalescingBinaryOperator,
  isMappedTypeNode: () => isMappedTypeNode,
  isMemberName: () => isMemberName,
  isMetaProperty: () => isMetaProperty,
  isMethodDeclaration: () => isMethodDeclaration,
  isMethodOrAccessor: () => isMethodOrAccessor,
  isMethodSignature: () => isMethodSignature,
  isMinusToken: () => isMinusToken,
  isMissingDeclaration: () => isMissingDeclaration,
  isMissingPackageJsonInfo: () => isMissingPackageJsonInfo,
  isModifier: () => isModifier,
  isModifierKind: () => isModifierKind,
  isModifierLike: () => isModifierLike,
  isModuleAugmentationExternal: () => isModuleAugmentationExternal,
  isModuleBlock: () => isModuleBlock,
  isModuleBody: () => isModuleBody,
  isModuleDeclaration: () => isModuleDeclaration,
  isModuleExportName: () => isModuleExportName,
  isModuleExportsAccessExpression: () => isModuleExportsAccessExpression,
  isModuleIdentifier: () => isModuleIdentifier,
  isModuleName: () => isModuleName,
  isModuleOrEnumDeclaration: () => isModuleOrEnumDeclaration,
  isModuleReference: () => isModuleReference,
  isModuleSpecifierLike: () => isModuleSpecifierLike,
  isModuleWithStringLiteralName: () => isModuleWithStringLiteralName,
  isNameOfFunctionDeclaration: () => isNameOfFunctionDeclaration,
  isNameOfModuleDeclaration: () => isNameOfModuleDeclaration,
  isNamedDeclaration: () => isNamedDeclaration,
  isNamedEvaluation: () => isNamedEvaluation,
  isNamedEvaluationSource: () => isNamedEvaluationSource,
  isNamedExportBindings: () => isNamedExportBindings,
  isNamedExports: () => isNamedExports,
  isNamedImportBindings: () => isNamedImportBindings,
  isNamedImports: () => isNamedImports,
  isNamedImportsOrExports: () => isNamedImportsOrExports,
  isNamedTupleMember: () => isNamedTupleMember,
  isNamespaceBody: () => isNamespaceBody,
  isNamespaceExport: () => isNamespaceExport,
  isNamespaceExportDeclaration: () => isNamespaceExportDeclaration,
  isNamespaceImport: () => isNamespaceImport,
  isNamespaceReexportDeclaration: () => isNamespaceReexportDeclaration,
  isNewExpression: () => isNewExpression,
  isNewExpressionTarget: () => isNewExpressionTarget,
  isNewScopeNode: () => isNewScopeNode,
  isNoSubstitutionTemplateLiteral: () => isNoSubstitutionTemplateLiteral,
  isNodeArray: () => isNodeArray,
  isNodeArrayMultiLine: () => isNodeArrayMultiLine,
  isNodeDescendantOf: () => isNodeDescendantOf,
  isNodeKind: () => isNodeKind,
  isNodeLikeSystem: () => isNodeLikeSystem,
  isNodeModulesDirectory: () => isNodeModulesDirectory,
  isNodeWithPossibleHoistedDeclaration: () => isNodeWithPossibleHoistedDeclaration,
  isNonContextualKeyword: () => isNonContextualKeyword,
  isNonGlobalAmbientModule: () => isNonGlobalAmbientModule,
  isNonNullAccess: () => isNonNullAccess,
  isNonNullChain: () => isNonNullChain,
  isNonNullExpression: () => isNonNullExpression,
  isNonStaticMethodOrAccessorWithPrivateName: () => isNonStaticMethodOrAccessorWithPrivateName,
  isNotEmittedStatement: () => isNotEmittedStatement,
  isNullishCoalesce: () => isNullishCoalesce,
  isNumber: () => isNumber,
  isNumericLiteral: () => isNumericLiteral,
  isNumericLiteralName: () => isNumericLiteralName,
  isObjectBindingElementWithoutPropertyName: () => isObjectBindingElementWithoutPropertyName,
  isObjectBindingOrAssignmentElement: () => isObjectBindingOrAssignmentElement,
  isObjectBindingOrAssignmentPattern: () => isObjectBindingOrAssignmentPattern,
  isObjectBindingPattern: () => isObjectBindingPattern,
  isObjectLiteralElement: () => isObjectLiteralElement,
  isObjectLiteralElementLike: () => isObjectLiteralElementLike,
  isObjectLiteralExpression: () => isObjectLiteralExpression,
  isObjectLiteralMethod: () => isObjectLiteralMethod,
  isObjectLiteralOrClassExpressionMethodOrAccessor: () => isObjectLiteralOrClassExpressionMethodOrAccessor,
  isObjectTypeDeclaration: () => isObjectTypeDeclaration,
  isOmittedExpression: () => isOmittedExpression,
  isOptionalChain: () => isOptionalChain,
  isOptionalChainRoot: () => isOptionalChainRoot,
  isOptionalDeclaration: () => isOptionalDeclaration,
  isOptionalJSDocPropertyLikeTag: () => isOptionalJSDocPropertyLikeTag,
  isOptionalTypeNode: () => isOptionalTypeNode,
  isOuterExpression: () => isOuterExpression,
  isOutermostOptionalChain: () => isOutermostOptionalChain,
  isOverrideModifier: () => isOverrideModifier,
  isPackageJsonInfo: () => isPackageJsonInfo,
  isPackedArrayLiteral: () => isPackedArrayLiteral,
  isParameter: () => isParameter,
  isParameterPropertyDeclaration: () => isParameterPropertyDeclaration,
  isParameterPropertyModifier: () => isParameterPropertyModifier,
  isParenthesizedExpression: () => isParenthesizedExpression,
  isParenthesizedTypeNode: () => isParenthesizedTypeNode,
  isParseTreeNode: () => isParseTreeNode,
  isPartOfParameterDeclaration: () => isPartOfParameterDeclaration,
  isPartOfTypeNode: () => isPartOfTypeNode,
  isPartOfTypeOnlyImportOrExportDeclaration: () => isPartOfTypeOnlyImportOrExportDeclaration,
  isPartOfTypeQuery: () => isPartOfTypeQuery,
  isPartiallyEmittedExpression: () => isPartiallyEmittedExpression,
  isPatternMatch: () => isPatternMatch,
  isPinnedComment: () => isPinnedComment,
  isPlainJsFile: () => isPlainJsFile,
  isPlusToken: () => isPlusToken,
  isPossiblyTypeArgumentPosition: () => isPossiblyTypeArgumentPosition,
  isPostfixUnaryExpression: () => isPostfixUnaryExpression,
  isPrefixUnaryExpression: () => isPrefixUnaryExpression,
  isPrimitiveLiteralValue: () => isPrimitiveLiteralValue,
  isPrivateIdentifier: () => isPrivateIdentifier,
  isPrivateIdentifierClassElementDeclaration: () => isPrivateIdentifierClassElementDeclaration,
  isPrivateIdentifierPropertyAccessExpression: () => isPrivateIdentifierPropertyAccessExpression,
  isPrivateIdentifierSymbol: () => isPrivateIdentifierSymbol,
  isProgramUptoDate: () => isProgramUptoDate,
  isPrologueDirective: () => isPrologueDirective,
  isPropertyAccessChain: () => isPropertyAccessChain,
  isPropertyAccessEntityNameExpression: () => isPropertyAccessEntityNameExpression,
  isPropertyAccessExpression: () => isPropertyAccessExpression,
  isPropertyAccessOrQualifiedName: () => isPropertyAccessOrQualifiedName,
  isPropertyAccessOrQualifiedNameOrImportTypeNode: () => isPropertyAccessOrQualifiedNameOrImportTypeNode,
  isPropertyAssignment: () => isPropertyAssignment,
  isPropertyDeclaration: () => isPropertyDeclaration,
  isPropertyName: () => isPropertyName,
  isPropertyNameLiteral: () => isPropertyNameLiteral,
  isPropertySignature: () => isPropertySignature,
  isPrototypeAccess: () => isPrototypeAccess,
  isPrototypePropertyAssignment: () => isPrototypePropertyAssignment,
  isPunctuation: () => isPunctuation,
  isPushOrUnshiftIdentifier: () => isPushOrUnshiftIdentifier,
  isQualifiedName: () => isQualifiedName,
  isQuestionDotToken: () => isQuestionDotToken,
  isQuestionOrExclamationToken: () => isQuestionOrExclamationToken,
  isQuestionOrPlusOrMinusToken: () => isQuestionOrPlusOrMinusToken,
  isQuestionToken: () => isQuestionToken,
  isReadonlyKeyword: () => isReadonlyKeyword,
  isReadonlyKeywordOrPlusOrMinusToken: () => isReadonlyKeywordOrPlusOrMinusToken,
  isRecognizedTripleSlashComment: () => isRecognizedTripleSlashComment,
  isReferenceFileLocation: () => isReferenceFileLocation,
  isReferencedFile: () => isReferencedFile,
  isRegularExpressionLiteral: () => isRegularExpressionLiteral,
  isRequireCall: () => isRequireCall,
  isRequireVariableStatement: () => isRequireVariableStatement,
  isRestParameter: () => isRestParameter,
  isRestTypeNode: () => isRestTypeNode,
  isReturnStatement: () => isReturnStatement,
  isReturnStatementWithFixablePromiseHandler: () => isReturnStatementWithFixablePromiseHandler,
  isRightSideOfAccessExpression: () => isRightSideOfAccessExpression,
  isRightSideOfInstanceofExpression: () => isRightSideOfInstanceofExpression,
  isRightSideOfPropertyAccess: () => isRightSideOfPropertyAccess,
  isRightSideOfQualifiedName: () => isRightSideOfQualifiedName,
  isRightSideOfQualifiedNameOrPropertyAccess: () => isRightSideOfQualifiedNameOrPropertyAccess,
  isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName: () => isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName,
  isRootedDiskPath: () => isRootedDiskPath,
  isSameEntityName: () => isSameEntityName,
  isSatisfiesExpression: () => isSatisfiesExpression,
  isSemicolonClassElement: () => isSemicolonClassElement,
  isSetAccessor: () => isSetAccessor,
  isSetAccessorDeclaration: () => isSetAccessorDeclaration,
  isShiftOperatorOrHigher: () => isShiftOperatorOrHigher,
  isShorthandAmbientModuleSymbol: () => isShorthandAmbientModuleSymbol,
  isShorthandPropertyAssignment: () => isShorthandPropertyAssignment,
  isSideEffectImport: () => isSideEffectImport,
  isSignedNumericLiteral: () => isSignedNumericLiteral,
  isSimpleCopiableExpression: () => isSimpleCopiableExpression,
  isSimpleInlineableExpression: () => isSimpleInlineableExpression,
  isSimpleParameterList: () => isSimpleParameterList,
  isSingleOrDoubleQuote: () => isSingleOrDoubleQuote,
  isSolutionConfig: () => isSolutionConfig,
  isSourceElement: () => isSourceElement,
  isSourceFile: () => isSourceFile,
  isSourceFileFromLibrary: () => isSourceFileFromLibrary,
  isSourceFileJS: () => isSourceFileJS,
  isSourceFileNotJson: () => isSourceFileNotJson,
  isSourceMapping: () => isSourceMapping,
  isSpecialPropertyDeclaration: () => isSpecialPropertyDeclaration,
  isSpreadAssignment: () => isSpreadAssignment,
  isSpreadElement: () => isSpreadElement,
  isStatement: () => isStatement,
  isStatementButNotDeclaration: () => isStatementButNotDeclaration,
  isStatementOrBlock: () => isStatementOrBlock,
  isStatementWithLocals: () => isStatementWithLocals,
  isStatic: () => isStatic,
  isStaticModifier: () => isStaticModifier,
  isString: () => isString,
  isStringANonContextualKeyword: () => isStringANonContextualKeyword,
  isStringAndEmptyAnonymousObjectIntersection: () => isStringAndEmptyAnonymousObjectIntersection,
  isStringDoubleQuoted: () => isStringDoubleQuoted,
  isStringLiteral: () => isStringLiteral,
  isStringLiteralLike: () => isStringLiteralLike,
  isStringLiteralOrJsxExpression: () => isStringLiteralOrJsxExpression,
  isStringLiteralOrTemplate: () => isStringLiteralOrTemplate,
  isStringOrNumericLiteralLike: () => isStringOrNumericLiteralLike,
  isStringOrRegularExpressionOrTemplateLiteral: () => isStringOrRegularExpressionOrTemplateLiteral,
  isStringTextContainingNode: () => isStringTextContainingNode,
  isSuperCall: () => isSuperCall,
  isSuperKeyword: () => isSuperKeyword,
  isSuperProperty: () => isSuperProperty,
  isSupportedSourceFileName: () => isSupportedSourceFileName,
  isSwitchStatement: () => isSwitchStatement,
  isSyntaxList: () => isSyntaxList,
  isSyntheticExpression: () => isSyntheticExpression,
  isSyntheticReference: () => isSyntheticReference,
  isTagName: () => isTagName,
  isTaggedTemplateExpression: () => isTaggedTemplateExpression,
  isTaggedTemplateTag: () => isTaggedTemplateTag,
  isTemplateExpression: () => isTemplateExpression,
  isTemplateHead: () => isTemplateHead,
  isTemplateLiteral: () => isTemplateLiteral,
  isTemplateLiteralKind: () => isTemplateLiteralKind,
  isTemplateLiteralToken: () => isTemplateLiteralToken,
  isTemplateLiteralTypeNode: () => isTemplateLiteralTypeNode,
  isTemplateLiteralTypeSpan: () => isTemplateLiteralTypeSpan,
  isTemplateMiddle: () => isTemplateMiddle,
  isTemplateMiddleOrTemplateTail: () => isTemplateMiddleOrTemplateTail,
  isTemplateSpan: () => isTemplateSpan,
  isTemplateTail: () => isTemplateTail,
  isTextWhiteSpaceLike: () => isTextWhiteSpaceLike,
  isThis: () => isThis,
  isThisContainerOrFunctionBlock: () => isThisContainerOrFunctionBlock,
  isThisIdentifier: () => isThisIdentifier,
  isThisInTypeQuery: () => isThisInTypeQuery,
  isThisInitializedDeclaration: () => isThisInitializedDeclaration,
  isThisInitializedObjectBindingExpression: () => isThisInitializedObjectBindingExpression,
  isThisProperty: () => isThisProperty,
  isThisTypeNode: () => isThisTypeNode,
  isThisTypeParameter: () => isThisTypeParameter,
  isThisTypePredicate: () => isThisTypePredicate,
  isThrowStatement: () => isThrowStatement,
  isToken: () => isToken,
  isTokenKind: () => isTokenKind,
  isTraceEnabled: () => isTraceEnabled,
  isTransientSymbol: () => isTransientSymbol,
  isTrivia: () => isTrivia,
  isTryStatement: () => isTryStatement,
  isTupleTypeNode: () => isTupleTypeNode,
  isTypeAlias: () => isTypeAlias,
  isTypeAliasDeclaration: () => isTypeAliasDeclaration,
  isTypeAssertionExpression: () => isTypeAssertionExpression,
  isTypeDeclaration: () => isTypeDeclaration,
  isTypeElement: () => isTypeElement,
  isTypeKeyword: () => isTypeKeyword,
  isTypeKeywordTokenOrIdentifier: () => isTypeKeywordTokenOrIdentifier,
  isTypeLiteralNode: () => isTypeLiteralNode,
  isTypeNode: () => isTypeNode,
  isTypeNodeKind: () => isTypeNodeKind,
  isTypeOfExpression: () => isTypeOfExpression,
  isTypeOnlyExportDeclaration: () => isTypeOnlyExportDeclaration,
  isTypeOnlyImportDeclaration: () => isTypeOnlyImportDeclaration,
  isTypeOnlyImportOrExportDeclaration: () => isTypeOnlyImportOrExportDeclaration,
  isTypeOperatorNode: () => isTypeOperatorNode,
  isTypeParameterDeclaration: () => isTypeParameterDeclaration,
  isTypePredicateNode: () => isTypePredicateNode,
  isTypeQueryNode: () => isTypeQueryNode,
  isTypeReferenceNode: () => isTypeReferenceNode,
  isTypeReferenceType: () => isTypeReferenceType,
  isTypeUsableAsPropertyName: () => isTypeUsableAsPropertyName,
  isUMDExportSymbol: () => isUMDExportSymbol,
  isUnaryExpression: () => isUnaryExpression,
  isUnaryExpressionWithWrite: () => isUnaryExpressionWithWrite,
  isUnicodeIdentifierStart: () => isUnicodeIdentifierStart,
  isUnionTypeNode: () => isUnionTypeNode,
  isUrl: () => isUrl,
  isValidBigIntString: () => isValidBigIntString,
  isValidESSymbolDeclaration: () => isValidESSymbolDeclaration,
  isValidTypeOnlyAliasUseSite: () => isValidTypeOnlyAliasUseSite,
  isValueSignatureDeclaration: () => isValueSignatureDeclaration,
  isVarAwaitUsing: () => isVarAwaitUsing,
  isVarConst: () => isVarConst,
  isVarConstLike: () => isVarConstLike,
  isVarUsing: () => isVarUsing,
  isVariableDeclaration: () => isVariableDeclaration,
  isVariableDeclarationInVariableStatement: () => isVariableDeclarationInVariableStatement,
  isVariableDeclarationInitializedToBareOrAccessedRequire: () => isVariableDeclarationInitializedToBareOrAccessedRequire,
  isVariableDeclarationInitializedToRequire: () => isVariableDeclarationInitializedToRequire,
  isVariableDeclarationList: () => isVariableDeclarationList,
  isVariableLike: () => isVariableLike,
  isVariableStatement: () => isVariableStatement,
  isVoidExpression: () => isVoidExpression,
  isWatchSet: () => isWatchSet,
  isWhileStatement: () => isWhileStatement,
  isWhiteSpaceLike: () => isWhiteSpaceLike,
  isWhiteSpaceSingleLine: () => isWhiteSpaceSingleLine,
  isWithStatement: () => isWithStatement,
  isWriteAccess: () => isWriteAccess,
  isWriteOnlyAccess: () => isWriteOnlyAccess,
  isYieldExpression: () => isYieldExpression,
  jsxModeNeedsExplicitImport: () => jsxModeNeedsExplicitImport,
  keywordPart: () => keywordPart,
  last: () => last,
  lastOrUndefined: () => lastOrUndefined,
  length: () => length,
  libMap: () => libMap,
  libs: () => libs,
  lineBreakPart: () => lineBreakPart,
  loadModuleFromGlobalCache: () => loadModuleFromGlobalCache,
  loadWithModeAwareCache: () => loadWithModeAwareCache,
  makeIdentifierFromModuleName: () => makeIdentifierFromModuleName,
  makeImport: () => makeImport,
  makeStringLiteral: () => makeStringLiteral,
  mangleScopedPackageName: () => mangleScopedPackageName,
  map: () => map,
  mapAllOrFail: () => mapAllOrFail,
  mapDefined: () => mapDefined,
  mapDefinedIterator: () => mapDefinedIterator,
  mapEntries: () => mapEntries,
  mapIterator: () => mapIterator,
  mapOneOrMany: () => mapOneOrMany,
  mapToDisplayParts: () => mapToDisplayParts,
  matchFiles: () => matchFiles,
  matchPatternOrExact: () => matchPatternOrExact,
  matchedText: () => matchedText,
  matchesExclude: () => matchesExclude,
  matchesExcludeWorker: () => matchesExcludeWorker,
  maxBy: () => maxBy,
  maybeBind: () => maybeBind,
  maybeSetLocalizedDiagnosticMessages: () => maybeSetLocalizedDiagnosticMessages,
  memoize: () => memoize,
  memoizeOne: () => memoizeOne,
  min: () => min,
  minAndMax: () => minAndMax,
  missingFileModifiedTime: () => missingFileModifiedTime,
  modifierToFlag: () => modifierToFlag,
  modifiersToFlags: () => modifiersToFlags,
  moduleExportNameIsDefault: () => moduleExportNameIsDefault,
  moduleExportNameTextEscaped: () => moduleExportNameTextEscaped,
  moduleExportNameTextUnescaped: () => moduleExportNameTextUnescaped,
  moduleOptionDeclaration: () => moduleOptionDeclaration,
  moduleResolutionIsEqualTo: () => moduleResolutionIsEqualTo,
  moduleResolutionNameAndModeGetter: () => moduleResolutionNameAndModeGetter,
  moduleResolutionOptionDeclarations: () => moduleResolutionOptionDeclarations,
  moduleResolutionSupportsPackageJsonExportsAndImports: () => moduleResolutionSupportsPackageJsonExportsAndImports,
  moduleResolutionUsesNodeModules: () => moduleResolutionUsesNodeModules,
  moduleSpecifierToValidIdentifier: () => moduleSpecifierToValidIdentifier,
  moduleSpecifiers: () => ts_moduleSpecifiers_exports,
  moduleSupportsImportAttributes: () => moduleSupportsImportAttributes,
  moduleSymbolToValidIdentifier: () => moduleSymbolToValidIdentifier,
  moveEmitHelpers: () => moveEmitHelpers,
  moveRangeEnd: () => moveRangeEnd,
  moveRangePastDecorators: () => moveRangePastDecorators,
  moveRangePastModifiers: () => moveRangePastModifiers,
  moveRangePos: () => moveRangePos,
  moveSyntheticComments: () => moveSyntheticComments,
  mutateMap: () => mutateMap,
  mutateMapSkippingNewValues: () => mutateMapSkippingNewValues,
  needsParentheses: () => needsParentheses,
  needsScopeMarker: () => needsScopeMarker,
  newCaseClauseTracker: () => newCaseClauseTracker,
  newPrivateEnvironment: () => newPrivateEnvironment,
  noEmitNotification: () => noEmitNotification,
  noEmitSubstitution: () => noEmitSubstitution,
  noTransformers: () => noTransformers,
  noTruncationMaximumTruncationLength: () => noTruncationMaximumTruncationLength,
  nodeCanBeDecorated: () => nodeCanBeDecorated,
  nodeCoreModules: () => nodeCoreModules,
  nodeHasName: () => nodeHasName,
  nodeIsDecorated: () => nodeIsDecorated,
  nodeIsMissing: () => nodeIsMissing,
  nodeIsPresent: () => nodeIsPresent,
  nodeIsSynthesized: () => nodeIsSynthesized,
  nodeModuleNameResolver: () => nodeModuleNameResolver,
  nodeModulesPathPart: () => nodeModulesPathPart,
  nodeNextJsonConfigResolver: () => nodeNextJsonConfigResolver,
  nodeOrChildIsDecorated: () => nodeOrChildIsDecorated,
  nodeOverlapsWithStartEnd: () => nodeOverlapsWithStartEnd,
  nodePosToString: () => nodePosToString,
  nodeSeenTracker: () => nodeSeenTracker,
  nodeStartsNewLexicalEnvironment: () => nodeStartsNewLexicalEnvironment,
  noop: () => noop,
  noopFileWatcher: () => noopFileWatcher,
  normalizePath: () => normalizePath,
  normalizeSlashes: () => normalizeSlashes,
  normalizeSpans: () => normalizeSpans,
  not: () => not,
  notImplemented: () => notImplemented,
  notImplementedResolver: () => notImplementedResolver,
  nullNodeConverters: () => nullNodeConverters,
  nullParenthesizerRules: () => nullParenthesizerRules,
  nullTransformationContext: () => nullTransformationContext,
  objectAllocator: () => objectAllocator,
  operatorPart: () => operatorPart,
  optionDeclarations: () => optionDeclarations,
  optionMapToObject: () => optionMapToObject,
  optionsAffectingProgramStructure: () => optionsAffectingProgramStructure,
  optionsForBuild: () => optionsForBuild,
  optionsForWatch: () => optionsForWatch,
  optionsHaveChanges: () => optionsHaveChanges,
  or: () => or,
  orderedRemoveItem: () => orderedRemoveItem,
  orderedRemoveItemAt: () => orderedRemoveItemAt,
  packageIdToPackageName: () => packageIdToPackageName,
  packageIdToString: () => packageIdToString,
  parameterIsThisKeyword: () => parameterIsThisKeyword,
  parameterNamePart: () => parameterNamePart,
  parseBaseNodeFactory: () => parseBaseNodeFactory,
  parseBigInt: () => parseBigInt,
  parseBuildCommand: () => parseBuildCommand,
  parseCommandLine: () => parseCommandLine,
  parseCommandLineWorker: () => parseCommandLineWorker,
  parseConfigFileTextToJson: () => parseConfigFileTextToJson,
  parseConfigFileWithSystem: () => parseConfigFileWithSystem,
  parseConfigHostFromCompilerHostLike: () => parseConfigHostFromCompilerHostLike,
  parseCustomTypeOption: () => parseCustomTypeOption,
  parseIsolatedEntityName: () => parseIsolatedEntityName,
  parseIsolatedJSDocComment: () => parseIsolatedJSDocComment,
  parseJSDocTypeExpressionForTests: () => parseJSDocTypeExpressionForTests,
  parseJsonConfigFileContent: () => parseJsonConfigFileContent,
  parseJsonSourceFileConfigFileContent: () => parseJsonSourceFileConfigFileContent,
  parseJsonText: () => parseJsonText,
  parseListTypeOption: () => parseListTypeOption,
  parseNodeFactory: () => parseNodeFactory,
  parseNodeModuleFromPath: () => parseNodeModuleFromPath,
  parsePackageName: () => parsePackageName,
  parsePseudoBigInt: () => parsePseudoBigInt,
  parseValidBigInt: () => parseValidBigInt,
  pasteEdits: () => ts_PasteEdits_exports,
  patchWriteFileEnsuringDirectory: () => patchWriteFileEnsuringDirectory,
  pathContainsNodeModules: () => pathContainsNodeModules,
  pathIsAbsolute: () => pathIsAbsolute,
  pathIsBareSpecifier: () => pathIsBareSpecifier,
  pathIsRelative: () => pathIsRelative,
  patternText: () => patternText,
  performIncrementalCompilation: () => performIncrementalCompilation,
  performance: () => ts_performance_exports,
  positionBelongsToNode: () => positionBelongsToNode,
  positionIsASICandidate: () => positionIsASICandidate,
  positionIsSynthesized: () => positionIsSynthesized,
  positionsAreOnSameLine: () => positionsAreOnSameLine,
  preProcessFile: () => preProcessFile,
  probablyUsesSemicolons: () => probablyUsesSemicolons,
  processCommentPragmas: () => processCommentPragmas,
  processPragmasIntoFields: () => processPragmasIntoFields,
  processTaggedTemplateExpression: () => processTaggedTemplateExpression,
  programContainsEsModules: () => programContainsEsModules,
  programContainsModules: () => programContainsModules,
  projectReferenceIsEqualTo: () => projectReferenceIsEqualTo,
  propertyNamePart: () => propertyNamePart,
  pseudoBigIntToString: () => pseudoBigIntToString,
  punctuationPart: () => punctuationPart,
  pushIfUnique: () => pushIfUnique,
  quote: () => quote,
  quotePreferenceFromString: () => quotePreferenceFromString,
  rangeContainsPosition: () => rangeContainsPosition,
  rangeContainsPositionExclusive: () => rangeContainsPositionExclusive,
  rangeContainsRange: () => rangeContainsRange,
  rangeContainsRangeExclusive: () => rangeContainsRangeExclusive,
  rangeContainsStartEnd: () => rangeContainsStartEnd,
  rangeEndIsOnSameLineAsRangeStart: () => rangeEndIsOnSameLineAsRangeStart,
  rangeEndPositionsAreOnSameLine: () => rangeEndPositionsAreOnSameLine,
  rangeEquals: () => rangeEquals,
  rangeIsOnSingleLine: () => rangeIsOnSingleLine,
  rangeOfNode: () => rangeOfNode,
  rangeOfTypeParameters: () => rangeOfTypeParameters,
  rangeOverlapsWithStartEnd: () => rangeOverlapsWithStartEnd,
  rangeStartIsOnSameLineAsRangeEnd: () => rangeStartIsOnSameLineAsRangeEnd,
  rangeStartPositionsAreOnSameLine: () => rangeStartPositionsAreOnSameLine,
  readBuilderProgram: () => readBuilderProgram,
  readConfigFile: () => readConfigFile,
  readJson: () => readJson,
  readJsonConfigFile: () => readJsonConfigFile,
  readJsonOrUndefined: () => readJsonOrUndefined,
  reduceEachLeadingCommentRange: () => reduceEachLeadingCommentRange,
  reduceEachTrailingCommentRange: () => reduceEachTrailingCommentRange,
  reduceLeft: () => reduceLeft,
  reduceLeftIterator: () => reduceLeftIterator,
  reducePathComponents: () => reducePathComponents,
  refactor: () => ts_refactor_exports,
  regExpEscape: () => regExpEscape,
  regularExpressionFlagToCharacterCode: () => regularExpressionFlagToCharacterCode,
  relativeComplement: () => relativeComplement,
  removeAllComments: () => removeAllComments,
  removeEmitHelper: () => removeEmitHelper,
  removeExtension: () => removeExtension,
  removeFileExtension: () => removeFileExtension,
  removeIgnoredPath: () => removeIgnoredPath,
  removeMinAndVersionNumbers: () => removeMinAndVersionNumbers,
  removePrefix: () => removePrefix,
  removeSuffix: () => removeSuffix,
  removeTrailingDirectorySeparator: () => removeTrailingDirectorySeparator,
  repeatString: () => repeatString,
  replaceElement: () => replaceElement,
  replaceFirstStar: () => replaceFirstStar,
  resolutionExtensionIsTSOrJson: () => resolutionExtensionIsTSOrJson,
  resolveConfigFileProjectName: () => resolveConfigFileProjectName,
  resolveJSModule: () => resolveJSModule,
  resolveLibrary: () => resolveLibrary,
  resolveModuleName: () => resolveModuleName,
  resolveModuleNameFromCache: () => resolveModuleNameFromCache,
  resolvePackageNameToPackageJson: () => resolvePackageNameToPackageJson,
  resolvePath: () => resolvePath,
  resolveProjectReferencePath: () => resolveProjectReferencePath,
  resolveTripleslashReference: () => resolveTripleslashReference,
  resolveTypeReferenceDirective: () => resolveTypeReferenceDirective,
  resolvingEmptyArray: () => resolvingEmptyArray,
  returnFalse: () => returnFalse,
  returnNoopFileWatcher: () => returnNoopFileWatcher,
  returnTrue: () => returnTrue,
  returnUndefined: () => returnUndefined,
  returnsPromise: () => returnsPromise,
  rewriteModuleSpecifier: () => rewriteModuleSpecifier,
  sameFlatMap: () => sameFlatMap,
  sameMap: () => sameMap,
  sameMapping: () => sameMapping,
  scanTokenAtPosition: () => scanTokenAtPosition,
  scanner: () => scanner,
  semanticDiagnosticsOptionDeclarations: () => semanticDiagnosticsOptionDeclarations,
  serializeCompilerOptions: () => serializeCompilerOptions,
  server: () => ts_server_exports4,
  servicesVersion: () => servicesVersion,
  setCommentRange: () => setCommentRange,
  setConfigFileInOptions: () => setConfigFileInOptions,
  setConstantValue: () => setConstantValue,
  setEmitFlags: () => setEmitFlags,
  setGetSourceFileAsHashVersioned: () => setGetSourceFileAsHashVersioned,
  setIdentifierAutoGenerate: () => setIdentifierAutoGenerate,
  setIdentifierGeneratedImportReference: () => setIdentifierGeneratedImportReference,
  setIdentifierTypeArguments: () => setIdentifierTypeArguments,
  setInternalEmitFlags: () => setInternalEmitFlags,
  setLocalizedDiagnosticMessages: () => setLocalizedDiagnosticMessages,
  setNodeChildren: () => setNodeChildren,
  setNodeFlags: () => setNodeFlags,
  setObjectAllocator: () => setObjectAllocator,
  setOriginalNode: () => setOriginalNode,
  setParent: () => setParent,
  setParentRecursive: () => setParentRecursive,
  setPrivateIdentifier: () => setPrivateIdentifier,
  setSnippetElement: () => setSnippetElement,
  setSourceMapRange: () => setSourceMapRange,
  setStackTraceLimit: () => setStackTraceLimit,
  setStartsOnNewLine: () => setStartsOnNewLine,
  setSyntheticLeadingComments: () => setSyntheticLeadingComments,
  setSyntheticTrailingComments: () => setSyntheticTrailingComments,
  setSys: () => setSys,
  setSysLog: () => setSysLog,
  setTextRange: () => setTextRange,
  setTextRangeEnd: () => setTextRangeEnd,
  setTextRangePos: () => setTextRangePos,
  setTextRangePosEnd: () => setTextRangePosEnd,
  setTextRangePosWidth: () => setTextRangePosWidth,
  setTokenSourceMapRange: () => setTokenSourceMapRange,
  setTypeNode: () => setTypeNode,
  setUILocale: () => setUILocale,
  setValueDeclaration: () => setValueDeclaration,
  shouldAllowImportingTsExtension: () => shouldAllowImportingTsExtension,
  shouldPreserveConstEnums: () => shouldPreserveConstEnums,
  shouldRewriteModuleSpecifier: () => shouldRewriteModuleSpecifier,
  shouldUseUriStyleNodeCoreModules: () => shouldUseUriStyleNodeCoreModules,
  showModuleSpecifier: () => showModuleSpecifier,
  signatureHasRestParameter: () => signatureHasRestParameter,
  signatureToDisplayParts: () => signatureToDisplayParts,
  single: () => single,
  singleElementArray: () => singleElementArray,
  singleIterator: () => singleIterator,
  singleOrMany: () => singleOrMany,
  singleOrUndefined: () => singleOrUndefined,
  skipAlias: () => skipAlias,
  skipConstraint: () => skipConstraint,
  skipOuterExpressions: () => skipOuterExpressions,
  skipParentheses: () => skipParentheses,
  skipPartiallyEmittedExpressions: () => skipPartiallyEmittedExpressions,
  skipTrivia: () => skipTrivia,
  skipTypeChecking: () => skipTypeChecking,
  skipTypeCheckingIgnoringNoCheck: () => skipTypeCheckingIgnoringNoCheck,
  skipTypeParentheses: () => skipTypeParentheses,
  skipWhile: () => skipWhile,
  sliceAfter: () => sliceAfter,
  some: () => some,
  sortAndDeduplicate: () => sortAndDeduplicate,
  sortAndDeduplicateDiagnostics: () => sortAndDeduplicateDiagnostics,
  sourceFileAffectingCompilerOptions: () => sourceFileAffectingCompilerOptions,
  sourceFileMayBeEmitted: () => sourceFileMayBeEmitted,
  sourceMapCommentRegExp: () => sourceMapCommentRegExp,
  sourceMapCommentRegExpDontCareLineStart: () => sourceMapCommentRegExpDontCareLineStart,
  spacePart: () => spacePart,
  spanMap: () => spanMap,
  startEndContainsRange: () => startEndContainsRange,
  startEndOverlapsWithStartEnd: () => startEndOverlapsWithStartEnd,
  startOnNewLine: () => startOnNewLine,
  startTracing: () => startTracing,
  startsWith: () => startsWith,
  startsWithDirectory: () => startsWithDirectory,
  startsWithUnderscore: () => startsWithUnderscore,
  startsWithUseStrict: () => startsWithUseStrict,
  stringContainsAt: () => stringContainsAt,
  stringToToken: () => stringToToken,
  stripQuotes: () => stripQuotes,
  supportedDeclarationExtensions: () => supportedDeclarationExtensions,
  supportedJSExtensionsFlat: () => supportedJSExtensionsFlat,
  supportedLocaleDirectories: () => supportedLocaleDirectories,
  supportedTSExtensionsFlat: () => supportedTSExtensionsFlat,
  supportedTSImplementationExtensions: () => supportedTSImplementationExtensions,
  suppressLeadingAndTrailingTrivia: () => suppressLeadingAndTrailingTrivia,
  suppressLeadingTrivia: () => suppressLeadingTrivia,
  suppressTrailingTrivia: () => suppressTrailingTrivia,
  symbolEscapedNameNoDefault: () => symbolEscapedNameNoDefault,
  symbolName: () => symbolName,
  symbolNameNoDefault: () => symbolNameNoDefault,
  symbolToDisplayParts: () => symbolToDisplayParts,
  sys: () => sys,
  sysLog: () => sysLog,
  tagNamesAreEquivalent: () => tagNamesAreEquivalent,
  takeWhile: () => takeWhile,
  targetOptionDeclaration: () => targetOptionDeclaration,
  targetToLibMap: () => targetToLibMap,
  testFormatSettings: () => testFormatSettings,
  textChangeRangeIsUnchanged: () => textChangeRangeIsUnchanged,
  textChangeRangeNewSpan: () => textChangeRangeNewSpan,
  textChanges: () => ts_textChanges_exports,
  textOrKeywordPart: () => textOrKeywordPart,
  textPart: () => textPart,
  textRangeContainsPositionInclusive: () => textRangeContainsPositionInclusive,
  textRangeContainsTextSpan: () => textRangeContainsTextSpan,
  textRangeIntersectsWithTextSpan: () => textRangeIntersectsWithTextSpan,
  textSpanContainsPosition: () => textSpanContainsPosition,
  textSpanContainsTextRange: () => textSpanContainsTextRange,
  textSpanContainsTextSpan: () => textSpanContainsTextSpan,
  textSpanEnd: () => textSpanEnd,
  textSpanIntersection: () => textSpanIntersection,
  textSpanIntersectsWith: () => textSpanIntersectsWith,
  textSpanIntersectsWithPosition: () => textSpanIntersectsWithPosition,
  textSpanIntersectsWithTextSpan: () => textSpanIntersectsWithTextSpan,
  textSpanIsEmpty: () => textSpanIsEmpty,
  textSpanOverlap: () => textSpanOverlap,
  textSpanOverlapsWith: () => textSpanOverlapsWith,
  textSpansEqual: () => textSpansEqual,
  textToKeywordObj: () => textToKeywordObj,
  timestamp: () => timestamp,
  toArray: () => toArray,
  toBuilderFileEmit: () => toBuilderFileEmit,
  toBuilderStateFileInfoForMultiEmit: () => toBuilderStateFileInfoForMultiEmit,
  toEditorSettings: () => toEditorSettings,
  toFileNameLowerCase: () => toFileNameLowerCase,
  toPath: () => toPath,
  toProgramEmitPending: () => toProgramEmitPending,
  toSorted: () => toSorted,
  tokenIsIdentifierOrKeyword: () => tokenIsIdentifierOrKeyword,
  tokenIsIdentifierOrKeywordOrGreaterThan: () => tokenIsIdentifierOrKeywordOrGreaterThan,
  tokenToString: () => tokenToString,
  trace: () => trace,
  tracing: () => tracing,
  tracingEnabled: () => tracingEnabled,
  transferSourceFileChildren: () => transferSourceFileChildren,
  transform: () => transform,
  transformClassFields: () => transformClassFields,
  transformDeclarations: () => transformDeclarations,
  transformECMAScriptModule: () => transformECMAScriptModule,
  transformES2015: () => transformES2015,
  transformES2016: () => transformES2016,
  transformES2017: () => transformES2017,
  transformES2018: () => transformES2018,
  transformES2019: () => transformES2019,
  transformES2020: () => transformES2020,
  transformES2021: () => transformES2021,
  transformESDecorators: () => transformESDecorators,
  transformESNext: () => transformESNext,
  transformGenerators: () => transformGenerators,
  transformImpliedNodeFormatDependentModule: () => transformImpliedNodeFormatDependentModule,
  transformJsx: () => transformJsx,
  transformLegacyDecorators: () => transformLegacyDecorators,
  transformModule: () => transformModule,
  transformNamedEvaluation: () => transformNamedEvaluation,
  transformNodes: () => transformNodes,
  transformSystemModule: () => transformSystemModule,
  transformTypeScript: () => transformTypeScript,
  transpile: () => transpile,
  transpileDeclaration: () => transpileDeclaration,
  transpileModule: () => transpileModule,
  transpileOptionValueCompilerOptions: () => transpileOptionValueCompilerOptions,
  tryAddToSet: () => tryAddToSet,
  tryAndIgnoreErrors: () => tryAndIgnoreErrors,
  tryCast: () => tryCast,
  tryDirectoryExists: () => tryDirectoryExists,
  tryExtractTSExtension: () => tryExtractTSExtension,
  tryFileExists: () => tryFileExists,
  tryGetClassExtendingExpressionWithTypeArguments: () => tryGetClassExtendingExpressionWithTypeArguments,
  tryGetClassImplementingOrExtendingExpressionWithTypeArguments: () => tryGetClassImplementingOrExtendingExpressionWithTypeArguments,
  tryGetDirectories: () => tryGetDirectories,
  tryGetExtensionFromPath: () => tryGetExtensionFromPath2,
  tryGetImportFromModuleSpecifier: () => tryGetImportFromModuleSpecifier,
  tryGetJSDocSatisfiesTypeNode: () => tryGetJSDocSatisfiesTypeNode,
  tryGetModuleNameFromFile: () => tryGetModuleNameFromFile,
  tryGetModuleSpecifierFromDeclaration: () => tryGetModuleSpecifierFromDeclaration,
  tryGetNativePerformanceHooks: () => tryGetNativePerformanceHooks,
  tryGetPropertyAccessOrIdentifierToString: () => tryGetPropertyAccessOrIdentifierToString,
  tryGetPropertyNameOfBindingOrAssignmentElement: () => tryGetPropertyNameOfBindingOrAssignmentElement,
  tryGetSourceMappingURL: () => tryGetSourceMappingURL,
  tryGetTextOfPropertyName: () => tryGetTextOfPropertyName,
  tryParseJson: () => tryParseJson,
  tryParsePattern: () => tryParsePattern,
  tryParsePatterns: () => tryParsePatterns,
  tryParseRawSourceMap: () => tryParseRawSourceMap,
  tryReadDirectory: () => tryReadDirectory,
  tryReadFile: () => tryReadFile,
  tryRemoveDirectoryPrefix: () => tryRemoveDirectoryPrefix,
  tryRemoveExtension: () => tryRemoveExtension,
  tryRemovePrefix: () => tryRemovePrefix,
  tryRemoveSuffix: () => tryRemoveSuffix,
  tscBuildOption: () => tscBuildOption,
  typeAcquisitionDeclarations: () => typeAcquisitionDeclarations,
  typeAliasNamePart: () => typeAliasNamePart,
  typeDirectiveIsEqualTo: () => typeDirectiveIsEqualTo,
  typeKeywords: () => typeKeywords,
  typeParameterNamePart: () => typeParameterNamePart,
  typeToDisplayParts: () => typeToDisplayParts,
  unchangedPollThresholds: () => unchangedPollThresholds,
  unchangedTextChangeRange: () => unchangedTextChangeRange,
  unescapeLeadingUnderscores: () => unescapeLeadingUnderscores,
  unmangleScopedPackageName: () => unmangleScopedPackageName,
  unorderedRemoveItem: () => unorderedRemoveItem,
  unprefixedNodeCoreModules: () => unprefixedNodeCoreModules,
  unreachableCodeIsError: () => unreachableCodeIsError,
  unsetNodeChildren: () => unsetNodeChildren,
  unusedLabelIsError: () => unusedLabelIsError,
  unwrapInnermostStatementOfLabel: () => unwrapInnermostStatementOfLabel,
  unwrapParenthesizedExpression: () => unwrapParenthesizedExpression,
  updateErrorForNoInputFiles: () => updateErrorForNoInputFiles,
  updateLanguageServiceSourceFile: () => updateLanguageServiceSourceFile,
  updateMissingFilePathsWatch: () => updateMissingFilePathsWatch,
  updateResolutionField: () => updateResolutionField,
  updateSharedExtendedConfigFileWatcher: () => updateSharedExtendedConfigFileWatcher,
  updateSourceFile: () => updateSourceFile,
  updateWatchingWildcardDirectories: () => updateWatchingWildcardDirectories,
  usingSingleLineStringWriter: () => usingSingleLineStringWriter,
  utf16EncodeAsString: () => utf16EncodeAsString,
  validateLocaleAndSetLanguage: () => validateLocaleAndSetLanguage,
  version: () => version,
  versionMajorMinor: () => versionMajorMinor,
  visitArray: () => visitArray,
  visitCommaListElements: () => visitCommaListElements,
  visitEachChild: () => visitEachChild,
  visitFunctionBody: () => visitFunctionBody,
  visitIterationBody: () => visitIterationBody,
  visitLexicalEnvironment: () => visitLexicalEnvironment,
  visitNode: () => visitNode,
  visitNodes: () => visitNodes2,
  visitParameterList: () => visitParameterList,
  walkUpBindingElementsAndPatterns: () => walkUpBindingElementsAndPatterns,
  walkUpOuterExpressions: () => walkUpOuterExpressions,
  walkUpParenthesizedExpressions: () => walkUpParenthesizedExpressions,
  walkUpParenthesizedTypes: () => walkUpParenthesizedTypes,
  walkUpParenthesizedTypesAndGetParentAndChild: () => walkUpParenthesizedTypesAndGetParentAndChild,
  whitespaceOrMapCommentRegExp: () => whitespaceOrMapCommentRegExp,
  writeCommentRange: () => writeCommentRange,
  writeFile: () => writeFile,
  writeFileEnsuringDirectories: () => writeFileEnsuringDirectories,
  zipWith: () => zipWith
});
module.exports = __toCommonJS(typescript_exports);

// src/compiler/corePublic.ts
var versionMajorMinor = "5.8";
var version = "5.8.3";
var Comparison = /* @__PURE__ */ ((Comparison3) => {
  Comparison3[Comparison3["LessThan"] = -1] = "LessThan";
  Comparison3[Comparison3["EqualTo"] = 0] = "EqualTo";
  Comparison3[Comparison3["GreaterThan"] = 1] = "GreaterThan";
  return Comparison3;
})(Comparison || {});

// src/compiler/core.ts
var emptyArray = [];
var emptyMap = /* @__PURE__ */ new Map();
function length(array) {
  return array !== void 0 ? array.length : 0;
}
function forEach(array, callback) {
  if (array !== void 0) {
    for (let i = 0; i < array.length; i++) {
      const result = callback(array[i], i);
      if (result) {
        return result;
      }
    }
  }
  return void 0;
}
function forEachRight(array, callback) {
  if (array !== void 0) {
    for (let i = array.length - 1; i >= 0; i--) {
      const result = callback(array[i], i);
      if (result) {
        return result;
      }
    }
  }
  return void 0;
}
function firstDefined(array, callback) {
  if (array === void 0) {
    return void 0;
  }
  for (let i = 0; i < array.length; i++) {
    const result = callback(array[i], i);
    if (result !== void 0) {
      return result;
    }
  }
  return void 0;
}
function firstDefinedIterator(iter, callback) {
  for (const value of iter) {
    const result = callback(value);
    if (result !== void 0) {
      return result;
    }
  }
  return void 0;
}
function reduceLeftIterator(iterator, f, initial) {
  let result = initial;
  if (iterator) {
    let pos = 0;
    for (const value of iterator) {
      result = f(result, value, pos);
      pos++;
    }
  }
  return result;
}
function zipWith(arrayA, arrayB, callback) {
  const result = [];
  Debug.assertEqual(arrayA.length, arrayB.length);
  for (let i = 0; i < arrayA.length; i++) {
    result.push(callback(arrayA[i], arrayB[i], i));
  }
  return result;
}
function intersperse(input, element) {
  if (input.length <= 1) {
    return input;
  }
  const result = [];
  for (let i = 0, n = input.length; i < n; i++) {
    if (i !== 0) result.push(element);
    result.push(input[i]);
  }
  return result;
}
function every(array, callback) {
  if (array !== void 0) {
    for (let i = 0; i < array.length; i++) {
      if (!callback(array[i], i)) {
        return false;
      }
    }
  }
  return true;
}
function find(array, predicate, startIndex) {
  if (array === void 0) return void 0;
  for (let i = startIndex ?? 0; i < array.length; i++) {
    const value = array[i];
    if (predicate(value, i)) {
      return value;
    }
  }
  return void 0;
}
function findLast(array, predicate, startIndex) {
  if (array === void 0) return void 0;
  for (let i = startIndex ?? array.length - 1; i >= 0; i--) {
    const value = array[i];
    if (predicate(value, i)) {
      return value;
    }
  }
  return void 0;
}
function findIndex(array, predicate, startIndex) {
  if (array === void 0) return -1;
  for (let i = startIndex ?? 0; i < array.length; i++) {
    if (predicate(array[i], i)) {
      return i;
    }
  }
  return -1;
}
function findLastIndex(array, predicate, startIndex) {
  if (array === void 0) return -1;
  for (let i = startIndex ?? array.length - 1; i >= 0; i--) {
    if (predicate(array[i], i)) {
      return i;
    }
  }
  return -1;
}
function contains(array, value, equalityComparer = equateValues) {
  if (array !== void 0) {
    for (let i = 0; i < array.length; i++) {
      if (equalityComparer(array[i], value)) {
        return true;
      }
    }
  }
  return false;
}
function indexOfAnyCharCode(text, charCodes, start) {
  for (let i = start ?? 0; i < text.length; i++) {
    if (contains(charCodes, text.charCodeAt(i))) {
      return i;
    }
  }
  return -1;
}
funct