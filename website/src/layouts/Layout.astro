---
// Main layout for all pages
import '@/styles/global.css';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import ThemeScript from '@/components/ThemeScript.astro';
import LetterGlitch from '@/components/LetterGlitch.tsx';
import Analytics from '@vercel/analytics/astro';

export interface Props {
  title: string;
  description?: string;
  showGlassyBackground?: boolean;
  showLetterGlitch?: boolean;
  glassyConfig?: {
    color?: string;
    opacity?: number;
    blur?: string;
  };
  letterGlitchConfig?: {
    glitchColors?: string[];
    glitchSpeed?: number;
    centerVignette?: boolean;
    outerVignette?: boolean;
    smooth?: boolean;
  };
}

const { 
  title, 
  description = "Your no-fluff, friendly guide to surviving and thriving in computer science.",
  showGlassyBackground = false,
  showLetterGlitch = false,
  glassyConfig = { color: "rgba(255, 255, 255, 0.1)", opacity: 0.1, blur: "20px" },
  letterGlitchConfig = { glitchColors: ["#2b4539", "#61dca3", "#61b3dc"], glitchSpeed: 50, centerVignette: false, outerVignette: true, smooth: true }
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    
    <!-- Meta tags for SEO -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
  </head>
  <body class="font-sans antialiased min-h-screen bg-background text-foreground">
    <ThemeScript />
    
    <div class="relative flex min-h-screen flex-col">
      {showLetterGlitch && (
        <div class="fixed inset-0 z-0">
          <LetterGlitch 
            client:only="react" 
            glitchColors={letterGlitchConfig.glitchColors}
            glitchSpeed={letterGlitchConfig.glitchSpeed}
            centerVignette={letterGlitchConfig.centerVignette}
            outerVignette={letterGlitchConfig.outerVignette}
            smooth={letterGlitchConfig.smooth}
          />
        </div>
      )}
      {showGlassyBackground && (
        <div class="fixed inset-0 z-0">
          <div class="glassy-background" style={`--glass-color: ${glassyConfig.color}; --glass-opacity: ${glassyConfig.opacity}; --glass-blur: ${glassyConfig.blur};`}></div>
        </div>
      )}
      
      <Header />
      
      {Astro.url.pathname === '/' ? (
        <main class="flex-1 relative z-10">
          <slot />
        </main>
      ) : (
        <main class="flex-1 relative z-10 gradient-bg">
          <slot />
        </main>
      )}
</html>

<style>
  .gradient-bg {
    position: relative;
    z-index: 10;
    background: linear-gradient(180deg, #181c2b 0%, #2a225a 50%, #3a1c5c 100%);
    transition: background 0.5s;
  }
  .dark .gradient-bg {
    background: linear-gradient(180deg, #181c2b 0%, #2a225a 50%, #3a1c5c 100%);
  }
  html.light .gradient-bg, .light .gradient-bg {
    background: linear-gradient(180deg, #e3e8ff 0%, #c7d2fe 50%, #f3e8ff 100%);
  }
  /* Scroll-based gradient shift */
  @media (pointer: fine) {
    .gradient-bg {
      will-change: background;
    }
  }
</style>


<script>
  // Animate gradient position on scroll and theme change for modern effect
  if (typeof window !== 'undefined') {
    function updateGradientBg() {
      const el = document.querySelector('.gradient-bg') as HTMLElement;
      if (!el) return;
      const scrollY = window.scrollY || window.pageYOffset;
      const max = document.body.scrollHeight - window.innerHeight;
      const percent = max > 0 ? scrollY / max : 0;
      if (document.documentElement.classList.contains('dark')) {
        el.style.background = `linear-gradient(180deg, #181c2b ${Math.max(0, 20 - percent*10)}%, #2a225a 50%, #3a1c5c ${Math.min(100, 80 + percent*10)}%)`;
      } else {
        el.style.background = `linear-gradient(180deg, #e3e8ff ${Math.max(0, 20 - percent*10)}%, #c7d2fe 50%, #f3e8ff ${Math.min(100, 80 + percent*10)}%)`;
      }
    }

    window.addEventListener('scroll', updateGradientBg);
    // Initial call on page load
    window.addEventListener('DOMContentLoaded', updateGradientBg);
    // Also call on resize (in case of layout changes)
    window.addEventListener('resize', updateGradientBg);

    // Observe theme changes (class changes on <html>)
    const html = document.documentElement;
    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          updateGradientBg();
        }
      }
    });
    observer.observe(html, { attributes: true });
  }
</script>
      
      <div class="relative z-10">
        <Footer />
      </div>
    </div>
    <Analytics />
  </body>
</html>

<style>
  body {
    font-family: 'Inter', system-ui, sans-serif;
  }
  
  code {
    font-family: 'JetBrains Mono', 'Courier New', monospace;
  }

  .glassy-background {
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      var(--glass-color, rgba(255, 255, 255, 0.1)) 0%,
      rgba(255, 255, 255, 0.05) 50%,
      var(--glass-color, rgba(255, 255, 255, 0.1)) 100%
    );
    backdrop-filter: blur(var(--glass-blur, 20px));
    -webkit-backdrop-filter: blur(var(--glass-blur, 20px));
    opacity: var(--glass-opacity, 0.1);
    position: relative;
  }

  .glassy-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      circle at 20% 50%, 
      rgba(120, 119, 198, 0.1) 0%, 
      transparent 50%
    ),
    radial-gradient(
      circle at 80% 20%, 
      rgba(255, 119, 198, 0.1) 0%, 
      transparent 50%
    ),
    radial-gradient(
      circle at 40% 80%, 
      rgba(120, 219, 255, 0.1) 0%, 
      transparent 50%
    );
    animation: float 20s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
    }
    33% {
      transform: translateY(-10px) rotate(1deg);
    }
    66% {
      transform: translateY(5px) rotate(-1deg);
    }
  }
</style>
